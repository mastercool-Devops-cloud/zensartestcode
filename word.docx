package com.example.config;

import com.example.filter.RequestLogFilter;
import com.example.filter.ResponseLogFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class LoggingFilterConfig {

    private final ApplicationProperties applicationProperties;

    public LoggingFilterConfig(ApplicationProperties applicationProperties) {
        this.applicationProperties = applicationProperties;
    }

    @Bean
    public RequestLogFilter requestLogFilter() {
        String applicationName = applicationProperties.getApplication();  // ✅ Fetch application name
        return new RequestLogFilter(applicationName);
    }

    @Bean
    public ResponseLogFilter responseLogFilter() {
        return new ResponseLogFilter();
    }
}
-----------------------------------
package com.example.filter;

import com.example.logging.util.HttpRequestLogHelper;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Component;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

@Log4j2
public class RequestLogFilter implements Filter {

    private final String applicationName;

    // ✅ Constructor to receive application name
    public RequestLogFilter(String applicationName) {
        this.applicationName = applicationName;
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Initialization logic, if needed
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        if (request instanceof HttpServletRequest) {
            HttpServletRequest httpRequest = (HttpServletRequest) request;

            // ✅ Log the request with the application name
            HttpRequestLogHelper.logRequest(httpRequest, applicationName);

            // ✅ Set start time for latency calculation
            long startTime = System.currentTimeMillis();
            httpRequest.setAttribute("startTime", startTime);
        }

        // Continue the chain
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {
        // Cleanup logic, if needed
    }
}
------------------------------------
package com.example.config;

import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Getter
@Component
public class ApplicationProperties {

    @Value("${application.name}")
    private String application;
}
