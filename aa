private static String getRequestBody(HttpServletRequest request) {
    return Optional.ofNullable(request)
            .filter(req -> req instanceof ContentCachingRequestWrapper)
            .map(req -> {
                ContentCachingRequestWrapper wrappedRequest = (ContentCachingRequestWrapper) req;
                byte[] content = wrappedRequest.getContentAsByteArray();
                return content.length > 0 ? new String(content, StandardCharsets.UTF_8) : "No body content.";
            })
            .orElse("Request body not available or request not wrapped with ContentCachingRequestWrapper.");
}
-------------------------------------------
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FilterConfig {

    @Bean
    public FilterRegistrationBean<LoggingCachingFilter> loggingFilter() {
        FilterRegistrationBean<LoggingCachingFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new LoggingCachingFilter());
        registrationBean.addUrlPatterns("/*"); // Apply to all URLs
        registrationBean.setOrder(1); // Set filter execution order (lower value = higher priority)
        return registrationBean;
    }
}
-------------------------------------------------
HttpServletRequest wrappedRequest = 
                    req instanceof ContentCachingRequestWrapper
                    ? req
                    : new ContentCachingRequestWrapper(req);
-----------------------------------
public static void logRequest(HttpServletRequest request) {
    Optional.ofNullable(request).ifPresentOrElse(req -> {
        try {
            // Check if the request is wrapped; wrap it if not already done
            HttpServletRequest wrappedRequest = 
                    req instanceof ContentCachingRequestWrapper
                    ? req
                    : new ContentCachingRequestWrapper(req);

            Map<String, Object> requestLog = Map.of(
                    "method", Optional.ofNullable(wrappedRequest.getMethod()).orElse("UNKNOWN"),
                    "uri", Optional.ofNullable(wrappedRequest.getRequestURI()).orElse("UNKNOWN"),
                    "query", Optional.ofNullable(wrappedRequest.getQueryString()).orElse(""),
                    "headers", Collections.list(wrappedRequest.getHeaderNames())
                            .stream()
                            .collect(Collectors.toMap(h -> h, wrappedRequest::getHeader)),
                    "body", getRequestBody(wrappedRequest) // Use the wrapped request for body extraction
            );
            logger.info("Request: {}", objectMapper.writeValueAsString(requestLog));
        } catch (Exception e) {
            logger.error("Error logging request: {}", e.getMessage(), e);
        }
    }, () -> logger.warn("HttpServletRequest is null, cannot log request."));
}

