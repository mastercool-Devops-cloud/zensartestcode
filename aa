private static String getRequestBody(HttpServletRequest request) {
    return Optional.ofNullable(request)
            .filter(req -> req instanceof ContentCachingRequestWrapper)
            .map(req -> {
                ContentCachingRequestWrapper wrappedRequest = (ContentCachingRequestWrapper) req;
                byte[] content = wrappedRequest.getContentAsByteArray();
                return content.length > 0 ? new String(content, StandardCharsets.UTF_8) : "No body content.";
            })
            .orElse("Request body not available or request not wrapped with ContentCachingRequestWrapper.");
}
-------------------------------------------
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FilterConfig {

    @Bean
    public FilterRegistrationBean<LoggingCachingFilter> loggingFilter() {
        FilterRegistrationBean<LoggingCachingFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new LoggingCachingFilter());
        registrationBean.addUrlPatterns("/*"); // Apply to all URLs
        registrationBean.setOrder(1); // Set filter execution order (lower value = higher priority)
        return registrationBean;
    }
}
