import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.HashMap;
import java.util.Map;

class ExceptionLogProcessorTest {

    private ExceptionLogProcessor exceptionLogProcessor;

    @Mock
    private ErrorLoggingHelper mockErrorLoggingHelper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        exceptionLogProcessor = new ExceptionLogProcessor();
    }

    @Test
    void testProcess_ValidException() {
        // Arrange
        Exception exception = new RuntimeException("Test exception");
        Map<String, String> mapData = new HashMap<>();

        // Act
        assertDoesNotThrow(() -> exceptionLogProcessor.process(exception, mapData));

        // Verify that buildLogException is called with the correct parameters
        // Since ErrorLoggingHelper is static, you need PowerMockito to mock static methods (not included here)
    }

    @Test
    void testProcess_InvalidInput_ThrowsException() {
        // Arrange
        Map<String, String> mapData = new HashMap<>();
        Object invalidObject = new Object(); // Not an Exception

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                exceptionLogProcessor.process(invalidObject, mapData)
        );

        assertEquals("Invalid input for ExceptionLogProcessor", exception.getMessage());
    }
}
