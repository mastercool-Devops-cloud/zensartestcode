import javax.annotation.PostConstruct;
import java.util.Properties;

@Configuration
public class DynamicDatabaseConfig {

    @Autowired
    private ConfigurableEnvironment environment;

    @PostConstruct
    public void setDatabaseProperties() {
        Properties props = new Properties();
        // Fetch these values from a secure location or environment variables
        String dynamicUsername = "myDynamicUser"; // Example, should fetch dynamically
        String dynamicPassword = "myDynamicPassword"; // Example, should fetch dynamically

        props.put("db.username", dynamicUsername);
        props.put("db.password", dynamicPassword);

        PropertiesPropertySource propertySource = new PropertiesPropertySource("dynamicProperties", props);
        environment.getPropertySources().addFirst(propertySource);
    }
}


---------------------------------------------------------------------------------------------------------------------
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;

@Configuration
public class DataSourceConfig {

    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(driverClassName);
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);

        return dataSource;
    }
}

--------------------------------------------------------------
<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.7.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>3.6.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.30</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.3</version>
    </dependency>
</dependencies>
-------------------------------------------------------
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

public class FileUtilsTest {

    private static final Logger Log = LoggerFactory.getLogger(FileUtilsTest.class);

    @TempDir
    Path tempDir;

    @Test
    public void testGetPathKeystore_DirectoryCreated() throws IOException {
        String testSubDir = "testSubDir";
        Path expectedPath = tempDir.resolve(testSubDir);
        System.setProperty("user.home", tempDir.toString());

        FileUtils.getPathKeystore(testSubDir);

        assertTrue(Files.exists(expectedPath));
    }

    @Test
    public void testGetPathKeystore_DirectoryAlreadyExists() throws IOException {
        String testSubDir = "existingSubDir";
        Path existingPath = Files.createDirectories(tempDir.resolve(testSubDir));
        System.setProperty("user.home", tempDir.toString());

        FileUtils.getPathKeystore(testSubDir);

        assertTrue(Files.exists(existingPath));
    }

    @Test
    public void testGetPathKeystore_LogErrorOnException() throws IOException {
        Logger logger = (Logger) LoggerFactory.getLogger(FileUtils.class);
        Logger spyLogger = spy(logger);
        doThrow(new IOException("Test Exception")).when(spyLogger).error(anyString());

        String testSubDir = "errorSubDir";
        System.setProperty("user.home", tempDir.toString());

        FileUtils.getPathKeystore(testSubDir);

        verify(spyLogger).error("Failed to create directory: Test Exception");
    }
}

----------------------------------------------------------------------------------
import static org.mockito.Mockito.when;

import java.text.ParseException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;

import javax.sql.DataSource;

@SpringBootTest
@ExtendWith(SpringExtension.class)
@ExtendWith(MockitoExtension.class)
class DataSourceConfigTest {

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Mock
    private FxPasswordSubscriber fxPasswordSubscriber;

    @Mock
    private DbCredentials dbCredentials;

    @Value("${spring.datasource.url}")
    private String url = "jdbc:h2:mem:testdb";

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName = "org.h2.Driver";

    @Value("${cyberarc.uat.url}")
    private String cyberArcUrl = "http://mock-cyberarc-url";

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(dataSourceConfig, "url", url);
        ReflectionTestUtils.setField(dataSourceConfig, "driverClassName", driverClassName);
        ReflectionTestUtils.setField(dataSourceConfig, "cyberArcUrl", cyberArcUrl);
    }

    @Test
    void testDataSource() throws ParseException {
        when(fxPasswordSubscriber.getDbCredentials(cyberArcUrl)).thenReturn(dbCredentials);
        when(dbCredentials.getUsername()).thenReturn("testUser");
        when(dbCredentials.getPassword()).thenReturn("testPass");

        DataSource dataSource = dataSourceConfig.dataSource();

        assertNotNull(dataSource);
        assertEquals(url, ((DriverManagerDataSource) dataSource).getUrl());
        assertEquals(driverClassName, ((DriverManagerDataSource) dataSource).getDriverClassName());
        assertEquals("testUser", ((DriverManagerDataSource) dataSource).getUsername());
        assertEquals("testPass", ((DriverManagerDataSource) dataSource).getPassword());
    }
}

<!-- Mockito -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <scope>test</scope>
    </dependency>
    <!-- JUnit 5 -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <scope>test</scope>
    </dependency>
