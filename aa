//String is anagram or not using java stream api

public class AnagramChecker {
    public static void main(String[] args) {
        String str1 = "Listen";
        String str2 = "Silent";

        boolean isAnagram = isAnagram(str1, str2);
        System.out.println("Is anagram? " + isAnagram);
    }

    public static boolean isAnagram(String s1, String s2) {
        String normalized1 = s1.replaceAll("\\s+", "").toLowerCase();
        String normalized2 = s2.replaceAll("\\s+", "").toLowerCase();

        String sorted1 = normalized1.chars()
            .sorted()
            .mapToObj(c -> String.valueOf((char) c))
            .collect(Collectors.joining());
	//OR
		String sorted1 = s1.toLowerCase().chars()
			.sorted()
			.collect(StringBuilder::new, ::StringBuilder::appendCodePoint , StringBuilder::append).toString;

        String sorted2 = normalized2.chars()
            .sorted()
            .mapToObj(c -> String.valueOf((char) c))
            .collect(Collectors.joining());
			
	//OR
		String sorted2 = s2.toLowerCase().chars()
			.sorted()
			.collect(StringBuilder::new, ::StringBuilder::appendCodePoint , StringBuilder::append).toString;


        return sorted1.equals(sorted2);
    }
}

---------------------------------------------------
//String is Panagram or not using java stream api
public class PangramChecker {
    public static void main(String[] args) {
        String sentence = "The quick brown fox jumps over the lazy dog";

        boolean isPangram = sentence.toLowerCase()
            .chars()
            .filter(Character::isLetter)
            .mapToObj(c -> (char) c)
            .collect(Collectors.toSet())
            .size() == 26;

        System.out.println("Is pangram? " + isPangram);
    }
}

-----------------------------------------------------
using java stream api to print number of vowels and consonants in String
public class VowelConsonantCounter {
    public static void main(String[] args) {
        String input = "Hello World";

        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');

        long vowelCount = input.toLowerCase()
            .chars()
            .filter(Character::isLetter)
            .mapToObj(c -> (char) c)
            .filter(vowels::contains)
            .count();

        long consonantCount = input.toLowerCase()
            .chars()
            .filter(Character::isLetter)
            .mapToObj(c -> (char) c)
            .filter(c -> !vowels.contains(c))
            .count();

        System.out.println("Vowels: " + vowelCount);
        System.out.println("Consonants: " + consonantCount);
    }
	----------------------------------------------
	
	//using java stream api to print reverse of a string?
	
	public class ReverseStringStream {
    public static void main(String[] args) {
        String input = "hello world";

        String reversed = IntStream.rangeClosed(1, input.length())
            .mapToObj(i -> input.charAt(input.length() - i))
            .map(String::valueOf)
            .collect(Collectors.joining());

        System.out.println("Reversed: " + reversed);
    }
}

-----------------------------------------------------
// using java stream api to check string is palindrome or not?
public class PalindromeChecker {
    public static void main(String[] args) {
        String input = "Madam";

        boolean isPalindrome = isPalindrome(input);
        System.out.println("Is palindrome? " + isPalindrome);
    }

    public static boolean isPalindrome(String str) {
        String normalized = str.replaceAll("\\s+", "").toLowerCase();

        String reversed = IntStream.rangeClosed(1, normalized.length())
            .mapToObj(i -> normalized.charAt(normalized.length() - i))
            .map(String::valueOf)
            .collect(Collectors.joining());

        return normalized.equals(reversed);
    }
}
-------------------------------------------------------
//check a given number is Palindrome or not using Java8 Streams
public class NumberPalindromeChecker {
    public static void main(String[] args) {
        int number = 12321;

        boolean isPalindrome = isPalindrome(number);
        System.out.println("Is palindrome? " + isPalindrome);
    }

    public static boolean isPalindrome(int number) {
        String numStr = String.valueOf(number);

        String reversed = IntStream.rangeClosed(1, numStr.length())
            .mapToObj(i -> numStr.charAt(numStr.length() - i))
            .map(String::valueOf)
            .collect(Collectors.joining());

        return numStr.equals(reversed);
    }
}
----------------------------------------------------
//ind missing numbers in an array using Stream API
public class MissingNumbersFinder {
    public static void main(String[] args) {
        int[] inputArray = {1, 2, 4, 6, 7, 10}; // Example: missing 3, 5, 8, 9
        int min = Arrays.stream(inputArray).min().orElse(0);
        int max = Arrays.stream(inputArray).max().orElse(0);

        Set<Integer> numberSet = Arrays.stream(inputArray)
            .boxed()
            .collect(Collectors.toSet());

        System.out.println("Missing numbers:");
        IntStream.rangeClosed(min, max)
            .filter(i -> !numberSet.contains(i))
            .forEach(System.out::println);
    }
}

traditional logic
for(int i=0; i<IntArray.length+1; i++){
	if(!set.contains(i))
		System.out.println("Missing number-:"+i);
	
}

-----------------------------------------
//All Substrings Using Java Streams
public class AllSubstrings {
    public static void main(String[] args) {
        String input = "abc";

        System.out.println("All substrings:");
        IntStream.range(0, input.length())
            .forEach(start ->
                IntStream.rangeClosed(start + 1, input.length())
                    .mapToObj(end -> input.substring(start, end))
                    .forEach(System.out::println)
            );
    }
}

-----------------------------------------
//check whether two strings are rotations of each other using Java Stream AP
public class StringRotationChecker {
    public static void main(String[] args) {
        String str1 = "abcd";
        String str2 = "cdab";

        boolean isRotation = isRotation(str1, str2);
        System.out.println("Are rotations? " + isRotation);
    }

    public static boolean isRotation(String s1, String s2) {
        if (s1.length() != s2.length()) return false;

        String concatenated = s1 + s1;

        // Check if s2 is a substring of concatenated using Stream
        return IntStream.rangeClosed(0, concatenated.length() - s2.length())
            .anyMatch(i -> concatenated.substring(i, i + s2.length()).equals(s2));
    }
}
-----------------------------------------------
//List All Prime Numbers in a Range
public class PrimeInRange {
    public static void main(String[] args) {
        int start = 1;
        int end = 50;

        System.out.println("Prime numbers from " + start + " to " + end + ":");

        IntStream.rangeClosed(start, end)
            .filter(PrimeInRange::isPrime)
            .forEach(System.out::println);
    }

    // Helper method to check if a number is prime
    public static boolean isPrime(int number) {
        if (number <= 1) return false;

        return IntStream.rangeClosed(2, (int) Math.sqrt(number))
            .noneMatch(i -> number % i == 0);
    }
}
//Remove an Element from Array Using Java 8 Strea
public class RemoveElementFromArray {
    public static void main(String[] args) {
        int[] arr = {10, 20, 30, 40, 50};
        int elementToRemove = 30;

        int[] result = Arrays.stream(arr)
                .filter(e -> e != elementToRemove)
                .toArray();

        System.out.println("Original: " + Arrays.toString(arr));
        System.out.println("After removal: " + Arrays.toString(result));
    }
}

----------------------------------------------
// How to delete an element from Array in Java using java 8 in below string
public class RemoveStringFromArray {
    public static void main(String[] args) {
        String[] fruits = {"banana", "orange", "grapes", "apple"};
        String toRemove = "grapes";

        String[] result = Arrays.stream(fruits)
                .filter(fruit -> !fruit.equals(toRemove))
                .toArray(String[]::new);

        System.out.println("Original: " + Arrays.toString(fruits));
        System.out.println("After removal: " + Arrays.toString(result));
    }
}
--------------------------------------------
//Java 8 Program to Find Repeating Elements
public class RepeatingElements {
    public static void main(String[] args) {
        Integer[] arr = {1, 2, 3, 4, 2, 5, 1, 6, 7, 3, 3};

        List<Integer> repeating = Arrays.stream(arr)
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
            .entrySet().stream()
            .filter(entry -> entry.getValue() > 1)
            .map(Map.Entry::getKey)
            .collect(Collectors.toList());

        System.out.println("Repeating elements: " + repeating);
    }
}
-------------------------------------------------
Main.java


package Java8Program;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class Main {

	public static void main(String args[]) {
		
		List<Employee> employeeList = new ArrayList<Employee>();
        
		employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "HR", 2011, 25000.0));
		employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Sales And Marketing", 2015, 13500.0));
		employeeList.add(new Employee(133, "Martin Theron", 29, "Male", "Infrastructure", 2012, 18000.0));
		employeeList.add(new Employee(144, "Murali Gowda", 28, "Male", "Product Development", 2014, 32500.0));
		employeeList.add(new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0));
		employeeList.add(new Employee(166, "Iqbal Hussain", 43, "Male", "Security And Transport", 2016, 10500.0));
		employeeList.add(new Employee(177, "Manu Sharma", 35, "Male", "Account And Finance", 2010, 27000.0));
		employeeList.add(new Employee(188, "Wang Liu", 31, "Male", "Product Development", 2015, 34500.0));
		employeeList.add(new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0));
		employeeList.add(new Employee(200, "Jaden Dough", 38, "Male", "Security And Transport", 2015, 11000.5));
		employeeList.add(new Employee(211, "Jasna Kaur", 27, "Female", "Infrastructure", 2014, 15700.0));
		employeeList.add(new Employee(222, "Nitin Joshi", 25, "Male", "Product Development", 2016, 28200.0));
		employeeList.add(new Employee(233, "Jyothi Reddy", 27, "Female", "Account And Finance", 2013, 21300.0));
		employeeList.add(new Employee(244, "Nicolus Den", 24, "Male", "Sales And Marketing", 2017, 10700.5));
		employeeList.add(new Employee(255, "Ali Baig", 23, "Male", "Infrastructure", 2018, 12700.0));
		employeeList.add(new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0));
		employeeList.add(new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0));
		
		
		//List of employee sorted by id;
		List<Employee> op1 = employeeList.stream().sorted(Comparator.comparing(Employee :: getId)).collect(Collectors.toList());
		//op1.forEach(System.out::println);
		
		//List of employee sorted by age then salary;
		List<Employee> op2 = employeeList.stream().sorted(Comparator.comparing(Employee :: getAge).thenComparing(Employee :: getSalary)).collect(Collectors.toList());
		op2.forEach(System.out::println);
		
		//How many male and female employees are there in the organization?
		Map<String, Long> op3 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
		System.out.println(op3);
		
		//Print the name of all departments in the organization?
		employeeList.stream().map(Employee::getDepartment).distinct().forEach(x-> System.out.println(x));
		
		//What is the average age of male and female employees?
		Map<String, Double> op4 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingInt(Employee::getAge)));
		System.out.println(op4);
		
		//What is the average salary of male and female employees?
		Map<String, Double> op5 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingDouble(Employee::getSalary)));
		System.out.println(op5);
		
		//Get the details of highest paid employee in the organization?
		Optional<Employee> op6 = employeeList.stream().collect(Collectors.maxBy(Comparator.comparing(Employee::getSalary)));
		System.out.println(op6.get().getName());
		
		//Get the names of all employees who have joined after 2015?
		List<String> op7 = employeeList.stream().filter(x -> x.getYearOfJoining()>2015).map(x-> x.getName()).collect(Collectors.toList());
		System.out.println(op7);
		
		//Count the number of employees in each department?
		Map<String,Long> op8 = employeeList.stream().collect(Collectors.groupingBy(Employee :: getDepartment ,Collectors.counting()));
		System.out.println(op8);
		
		//What is the average salary of each department?
		Map<String, Double> op9 = employeeList.stream().collect(Collectors.groupingBy(Employee :: getDepartment , Collectors.averagingDouble(Employee :: getSalary)));
		System.out.println(op9);
		
		//Get the details of youngest male employee in the each department?
		Map<String,Optional<Employee>> op10 = employeeList.stream().filter(x -> x.getGender().equalsIgnoreCase("male")).collect(Collectors.groupingBy(Employee :: getDepartment, Collectors.minBy(Comparator.comparing(Employee:: getAge))));
		System.out.println(op10);
		
		//Get the details of youngest male employee in the product development department?
		Optional<Employee> op11 = employeeList.stream().filter(x -> x.getGender().equalsIgnoreCase("male") && x.getDepartment().equalsIgnoreCase("Product Development")).min(Comparator.comparing(Employee::getAge));
		System.out.println(op11);
		
		Set<Entry<Boolean, List<Employee>>> entrySet = employeeList.stream().collect(Collectors.partitioningBy(e -> e.getAge() > 25)).entrySet();
				         
				for (Entry<Boolean, List<Employee>> entry : entrySet) 
				{
				             
				    if (entry.getKey()) 
				    {
				        System.out.println("Employees older than 25 years :");
				    }
				    else
				    {
				        System.out.println("Employees younger than or equal to 25 years :");
				    }
				             
				             
				    List<Employee> list = entry.getValue();
				             
				    for (Employee e : list) 
				    {
				        System.out.println(e.getName());
				    }
				}
		
		
		
		
		
		
		
		
		
		//Write a program to find the no. occurance of charter in a string an pring using map (key keyset and java 8)
				//Write a program to find the no. occurance of word in a sentance print usong map(by entry set and java 8)

		/*
		 * 
		 * String s1 = "GeeksforGeeksG"; char[] c = s1.toCharArray();
		 * Map<Character,Integer> map = new HashMap<>(); for(Character ch: c) {
		 * if(map.containsKey(ch)) { map.put(ch, map.get(ch)+1); }else { map.put(ch, 1);
		 * } }
		 * 
		 * Iterator<Entry<Character,Integer>> it = map.entrySet().iterator();
		 * while(it.hasNext()) { Entry<Character,Integer> entry = it.next();
		 * System.out.println(entry.getKey()+" : "+entry.getValue()); }
		 * 
		 * String s2 = "Geeks for Geeks to learn Geeks for Geeks to you"; String[] array
		 * = s2.split(" "); Map<String, Integer> maps = new HashMap<>(); for(String ss :
		 * array) { if(maps.containsKey(ss)) { maps.put(ss, maps.get(ss)+1); }else {
		 * maps.put(ss, 1); } }
		 * 
		 * Iterator<Entry<String,Integer>> its = maps.entrySet().iterator();
		 * while(its.hasNext()) { Entry<String,Integer> entry = its.next();
		 * System.out.println(entry.getKey()+" : "+entry.getValue()); }
		 * 
		 * List<String> list = Arrays.asList("abe","","bc","efg","abcd","","jkl"); Long
		 * countEmpty = list.stream().filter(s->s.length()==0).count();
		 * System.out.println(countEmpty); List<String> groupSameLengthStrig =
		 * list.stream().filter(s->s.length()==3).collect(Collectors.toList());
		 */
				
				
		List<Integer> list = Arrays.asList(1,4,5,6,22,3,90,90,89,2,1,3,4,55,6,-234);
		
		//print sum of all numbers
		Optional<Integer> output1 = list.stream().reduce((a,b)->(a+b));
		System.out.println(output1.get());
		//print the average of numbers
		Double output2 = list.stream().mapToInt(e->e).average().getAsDouble();
		System.out.println(output2);
		//squre then >100 then avegare
		Double output3 = list.stream().map(x -> x*x).filter(y -> y>100).mapToInt(z -> z).average().getAsDouble();
		System.out.println(output3);
		//print odd and even
		List<Integer> output4 = list.stream().filter(x->x%2==0).collect(Collectors.toList());
		System.out.println(output4);
		List<Integer> output5 = list.stream().filter(x->x%2!=0).collect(Collectors.toList());
		System.out.println(output5);
		//print number which starts from 2
		List<Integer> output6 = list.stream().map(a-> String.valueOf(a)).filter(b->b.startsWith("2") || b.startsWith("-2")).map(c->Integer.valueOf(c)).collect(Collectors.toList());
		System.out.println(output6);
		//print duplicate numbers
		Set<Integer> output7 = list.stream().filter(x->Collections.frequency(list, x)>1).collect(Collectors.toSet());
		System.out.println(output7);
		
		Set<Integer> set = new HashSet<>();
		List<Integer> output8 = list.stream().filter(x -> !set.add(x)).sorted().collect(Collectors.toList());
		System.out.println("PPP"+output8);
		
		
		//UNIQUE
		Set<Integer> set1 = new HashSet<>();
		List<Integer> output81 = list.stream().filter(x -> set1.add(x)).sorted().collect(Collectors.toList());
		System.out.println("PPP1"+output81);
		
		//Find the max and min number
		int output9 = list.stream().max(Comparator.comparing(Integer::valueOf)).get();
		int output10 = list.stream().min(Comparator.comparing(Integer::valueOf)).get();
		System.out.println(output9);
		System.out.println(output10);
		
		//Sort number asecding and decending order
		List<Integer> output11 = list.stream().sorted().collect(Collectors.toList());
		System.out.println(output11);
		List<Integer> output12 = list.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList());
		System.out.println(output12);
		
		//get first 5 number
		List<Integer> output13 = list.stream().limit(5).collect(Collectors.toList());
		System.out.println(output13);
		
		//get sum of first 5 number
		Optional<Integer> output14 = list.stream().limit(5).reduce((a,b)->(a+b));
		System.out.println(output14.get());
		
		//skip first 5 number
		List<Integer> output15 = list.stream().skip(5).collect(Collectors.toList());
		System.out.println(output15);
		
		
		//skip first 5 and add rest 
		Optional<Integer> output16 = list.stream().skip(5).reduce((a,b)->(a+b));
		System.out.println(output16.get());
		
		//find 2nd lowest/Highest number
		Optional<Integer> output17 = list.stream().sorted(Collections.reverseOrder()).distinct().limit(2).skip(1).findFirst();
		System.out.println(output17.get());
		
		Optional<Integer> output18 = list.stream().sorted(Collections.reverseOrder()).distinct().skip(1).findFirst();
		System.out.println(output18.get());
		
		
		Optional<Integer> output20 = list.stream().sorted().distinct().limit(2).skip(1).findFirst();
		System.out.println(output20.get());
		
		Optional<Integer> output21 = list.stream().sorted().distinct().skip(1).findFirst();
		System.out.println(output21.get());
		
		//use of peek() method: used for logging purpose
		System.out.println("-------------");
		List<Integer> output22=list.stream().peek(x->System.out.println(x+"BF")).filter(y->y%2==0).peek(z->System.out.println(z+"AF")).collect(Collectors.toList());
		System.out.println(output22);
		
		
		List<Integer> listNum = Arrays.asList(2,3,4,2,1,2,3,43,2);
		Map<Integer, Long> map1 = listNum.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
		map1.forEach((k,v)->System.out.println(k+"  "+v));
		
		//count the number of chars word in the sentance(Hello -5, word-5, program-7)
		String sentence = "Hello world program";
		Arrays.stream(sentence.split("\\s+"))
            .map(word -> word.toLowerCase() + " - " + (word.length()))
            .forEach(System.out::println);
		
		//String is Panagram or not using java stream api(A pangram is a sentence that contains every letter of the English alphabet at least once)
		String sentence = "The quick brown fox jumps over the lazy dog";
        boolean isPangram = sentence.toLowerCase()
            .chars()
            .filter(Character::isLetter)
            .mapToObj(c -> (char) c)
            .collect(Collectors.toSet())
            .size() == 26;

        System.out.println("Is pangram? " + isPangram);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
---------------------------------------------------
package Java8Program;

class Employee
{
    int id;
     
    String name;
     
    int age;
     
    String gender;
     
    String department;
     
    int yearOfJoining;
     
    double salary;
     
    public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) 
    {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.department = department;
        this.yearOfJoining = yearOfJoining;
        this.salary = salary;
    }
     
    public int getId() 
    {
        return id;
    }
     
    public String getName() 
    {
        return name;
    }
     
    public int getAge() 
    {
        return age;
    }
     
    public String getGender() 
    {
        return gender;
    }
     
    public String getDepartment() 
    {
        return department;
    }
     
    public int getYearOfJoining() 
    {
        return yearOfJoining;
    }
     
    public double getSalary() 
    {
        return salary;
    }
     
    @Override
    public String toString() 
    {
        return "Id : "+id
                +", Name : "+name
                +", age : "+age
                +", Gender : "+gender
                +", Department : "+department
                +", Year Of Joining : "+yearOfJoining
                +", Salary : "+salary;
    }
}
Collect all names that start with Letter R Return a Map that Uses the last letter from the name as Key and the actual name as a value 
List<String> names = Arrays.asList("John", "Smith", "Jose", "Rizal", "Rebecca", "Robert", "Ruiz", "Pikachu");
 
Output: {l=Rizal, a=Rebecca, t=Robert, z=Ruiz}
 
 
 
Department table 
dept_id	dept_name
1	HR
2	Engineering
3	Marketing
 
Employee Table 
emp_id	emp_name	salary	dept_id
101	Alice	60000	1
103	Charlie	80000	2
104	David	55000	3
105	Eve	NULL	3
106	Frank	80000	1
 
 
Find Highest Paid Employees per Department, should include the employee's name, their salary, and the name of the department they belong to
