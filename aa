import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Optional;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.util.ResourceUtils;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class FxPasswordClientTest {

    @InjectMocks
    private FxPasswordClient fxPasswordClient;

    @Mock
    private HttpClient httpClient;

    @Mock
    private HttpResponse<String> httpResponse;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private File keystoreFile;

    @Value("${keystore.path}")
    private String keystorePath = "classpath:keystore.jks";

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(fxPasswordClient, "keystorePath", keystorePath);
    }

    @Test
    public void testRequestCyberArcPasswordSuccess() throws Exception {
        String cyberArcUrl = "http://example.com";
        String responseJson = "{\"password\": \"testPassword\"}";
        DbCredentials dbCredentials = new DbCredentials();
        dbCredentials.setPassword("testPassword");

        when(httpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenReturn(httpResponse);
        when(httpResponse.body()).thenReturn(responseJson);
        when(objectMapper.readValue(responseJson, DbCredentials.class))
                .thenReturn(dbCredentials);

        Optional<String> password = fxPasswordClient.requestCyberArcPassword(cyberArcUrl);

        assertTrue(password.isPresent());
        assertEquals("testPassword", password.get());
    }

    @Test
    public void testRequestCyberArcPasswordFailure() throws Exception {
        String cyberArcUrl = "http://example.com";

        when(httpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenThrow(IOException.class);

        Optional<String> password = fxPasswordClient.requestCyberArcPassword(cyberArcUrl);

        assertFalse(password.isPresent());
    }

    @Test
    public void testCreateSslContext() throws Exception {
        KeyStore truststore = KeyStore.getInstance("JKS");
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        SSLContext sslContext = SSLContext.getInstance("TLS");

        try (FileInputStream fileInputStream = new FileInputStream(keystoreFile)) {
            truststore.load(fileInputStream, null);
            trustManagerFactory.init(truststore);
            sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());
        }

        when(ResourceUtils.getFile(keystorePath)).thenReturn(keystoreFile);
        SSLContext resultSslContext = fxPasswordClient.createSslContext();

        assertNotNull(resultSslContext);
    }

    @Test
    public void testGetKeystoreFile() throws Exception {
        when(ResourceUtils.getFile(keystorePath)).thenReturn(keystoreFile);

        File resultFile = fxPasswordClient.getKeystoreFile();

        assertNotNull(resultFile);
        assertEquals(keystoreFile, resultFile);
    }
}
