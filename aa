@Log4j2
public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    // Existing methods: logRequest(), logResponseWithBody()

    /**
     * Logs a general exception with optional contextual details.
     *
     * @param exception The exception to log.
     * @param context   Additional contextual information (can be null or empty).
     */
    public static void logException(Exception exception, Map<String, Object> context) {
        if (exception != null) {
            StringBuilder logMessage = new StringBuilder("An exception occurred: ");
            logMessage.append(exception.getMessage());

            // Add context if available
            if (context != null && !context.isEmpty()) {
                try {
                    String contextJson = objectMapper.writeValueAsString(context);
                    logMessage.append(" | Context: ").append(contextJson);
                } catch (JsonProcessingException e) {
                    logMessage.append(" | Context could not be serialized.");
                }
            }

            logger.error(logMessage.toString(), exception);
        } else {
            logger.warn("Attempted to log a null exception.");
        }
    }

    /**
     * Overloaded method for logging an exception without context.
     *
     * @param exception The exception to log.
     */
    public static void logException(Exception exception) {
        logException(exception, null);
    }
}
