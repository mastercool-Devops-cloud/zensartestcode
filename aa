import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class LogUtilTest {

    @Mock
    private Logger mockLogger;

    @Mock
    private RequestLog mockRequestLog;

    @Mock
    private ResponseLog mockResponseLog;

    @Mock
    private ErrorLog mockErrorLog;

    @Mock
    private ObjectMapper mockObjectMapper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        LogUtilTestHelper.setLogger(mockLogger);
        LogUtilTestHelper.setObjectMapper(mockObjectMapper);
    }

    @Test
    void testLog_RequestLog_Success() throws JsonProcessingException {
        when(mockObjectMapper.writeValueAsString(mockRequestLog)).thenReturn("{\"request\":\"test\"}");

        LogUtil.log(mockRequestLog);

        verify(mockLogger).info(eq("Request: {}"), anyString());
    }

    @Test
    void testLog_ResponseLog_Success() throws JsonProcessingException {
        when(mockObjectMapper.writeValueAsString(mockResponseLog)).thenReturn("{\"response\":\"test\"}");

        LogUtil.log(mockResponseLog);

        verify(mockLogger).info(eq("Response: {}"), anyString());
    }

    @Test
    void testLog_ErrorLog_Success() throws JsonProcessingException {
        when(mockObjectMapper.writeValueAsString(mockErrorLog)).thenReturn("{\"error\":\"test\"}");

        LogUtil.logException(mockErrorLog);

        verify(mockLogger).info(eq("Error: {}"), anyString());
    }

    @Test
    void testLog_RequestLog_JsonProcessingException() throws JsonProcessingException {
        when(mockObjectMapper.writeValueAsString(mockRequestLog)).thenThrow(new JsonProcessingException("Test Error") {});

        LogUtil.log(mockRequestLog);

        verify(mockLogger).error(eq("Error logging request: {}"), anyString(), any(JsonProcessingException.class));
    }
}
