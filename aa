import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

class LoggingUtilTest {

    private MockHttpServletRequest mockRequest;
    private MockHttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockRequest = new MockHttpServletRequest();
        mockResponse = new MockHttpServletResponse();
    }

    @Test
    void testLogRequest_WithValidRequest() {
        // Mock request data
        mockRequest.setMethod("POST");
        mockRequest.setRequestURI("/api/test");
        mockRequest.addHeader("Authorization", "Bearer dummy-token");

        // Call the method
        assertDoesNotThrow(() -> LoggingUtil.logRequest(mockRequest));
    }

    @Test
    void testLogRequest_WithNullRequest() {
        // Call with a null request
        assertDoesNotThrow(() -> LoggingUtil.logRequest(null));
    }

    @Test
    void testLogRequest_WithEmptyHeaders() {
        // Mock request data with no headers
        mockRequest.setMethod("GET");
        mockRequest.setRequestURI("/api/empty-headers");

        // Call the method
        assertDoesNotThrow(() -> LoggingUtil.logRequest(mockRequest));
    }

    @Test
    void testLogRequest_ExceptionHandling() {
        // Mock a request that throws an exception
        mockRequest = new MockHttpServletRequest() {
            @Override
            public String getMethod() {
                throw new RuntimeException("Simulated exception");
            }
        };

        // Call the method
        assertDoesNotThrow(() -> LoggingUtil.logRequest(mockRequest));
    }
}
