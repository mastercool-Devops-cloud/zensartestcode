@Slf4j
@AllArgsConstructor
@Component
@Aspect
public class RequestResponseLogger {

    private final ObjectMapper objectMapper;

    @Around("@annotation(org.springframework.web.bind.annotation.RequestMapping) || " +
            "@annotation(org.springframework.web.bind.annotation.PostMapping) || " +
            "@annotation(org.springframework.web.bind.annotation.GetMapping)")
    public Object logHttpRequestResponse(ProceedingJoinPoint joinPoint) throws Exception {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();

        if (attributes == null) {
            log.warn("RequestContextHolder does not contain any request attributes. Skipping logging.");
            return proceedSafely(joinPoint);
        }

        HttpServletRequest request = attributes.getRequest();
        HttpServletResponse response = attributes.getResponse();

        String requestBody = getRequestBody(joinPoint);
        log.info("Request: Method: {}, URI: {}, Body: {}",
                request.getMethod(),
                request.getRequestURI(),
                requestBody
        );

        Object result;
        long startTime = System.currentTimeMillis();
        try {
            result = proceedSafely(joinPoint);
        } catch (Exception e) {
            log.error("Exception: Method: {}, URI: {} failed with exception",
                    request.getMethod(),
                    request.getRequestURI(),
                    e);
            throw e; // Rethrow the exception
        }
        long duration = System.currentTimeMillis() - startTime;

        if (response != null) {
            String responseBody = convertObjectToJson(result);
            log.info("Response: Method: {}, URI: {}, Status: {} - Body: {}, Time Taken: {} ms",
                    request.getMethod(),
                    request.getRequestURI(),
                    response.getStatus(),
                    responseBody,
                    duration
            );
        } else {
            log.warn("HttpServletResponse is null. Skipping response logging.");
        }

        return result;
    }

    private Object proceedSafely(ProceedingJoinPoint joinPoint) throws Exception {
        try {
            return joinPoint.proceed();
        } catch (Throwable t) {
            // Wrap or rethrow Throwable as Exception
            if (t instanceof Exception) {
                throw (Exception) t;
            } else {
                throw new RuntimeException("Unexpected error occurred", t);
            }
        }
    }

    private String getRequestBody(ProceedingJoinPoint joinPoint) {
        Object[] args = joinPoint.getArgs();
        if (args.length > 0) {
            try {
                return Arrays.stream(args)
                        .map(this::convertObjectToJson)
                        .reduce((arg1, arg2) -> arg1 + ", " + arg2)
                        .orElse("");
            } catch (Exception e) {
                log.error("Error serializing request body", e);
            }
        }
        return "";
    }

    private String convertObjectToJson(Object object) {
        if (object == null) return "";
        try {
            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(object);
        } catch (JsonProcessingException e) {
            log.error("Error serializing object to JSON", e);
            return "Error serializing object to JSON";
        }
    }
}
else {
            log.warn("HTTP RESPONSE: [Method: {}, URI: {}, Status: {}, Time: {} ms, Body: {}] - Response object is null",
                    request.getMethod(),
                    request.getRequestURI(),
                    0,
                    duration,
                    "N/A");
        }
-------------------------------------------
@ExtendWith(MockitoExtension.class)
class RequestResponseLoggerTest {

    @InjectMocks
    private RequestResponseLogger requestResponseLogger;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private ProceedingJoinPoint joinPoint;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @BeforeEach
    void setup() {
        // Set up RequestContextHolder to provide mock request attributes
        ServletRequestAttributes attributes = new ServletRequestAttributes(request, response);
        RequestContextHolder.setRequestAttributes(attributes);
    }

    @Test
    void testLogHttpRequestResponse_Success() throws Throwable {
        // Arrange
        when(request.getMethod()).thenReturn("POST");
        when(request.getRequestURI()).thenReturn("/test/api");
        when(joinPoint.proceed()).thenReturn("Success Response");
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"key\":\"value\"}");
        when(response.getStatus()).thenReturn(200);

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act
        Object result = requestResponseLogger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("Success Response", result);
        assertTrue(logCaptor.getInfoLogs().stream()
                .anyMatch(log -> log.contains("HTTP REQUEST: [Method: POST, URI: /test/api, Body: {\"key\":\"value\"}]")));
        assertTrue(logCaptor.getInfoLogs().stream()
                .anyMatch(log -> log.contains("HTTP RESPONSE: [Method: POST, URI: /test/api, Status: 200, Time: ")));
    }

    @Test
    void testLogHttpRequestResponse_Exception() throws Throwable {
        // Arrange
        when(request.getMethod()).thenReturn("GET");
        when(request.getRequestURI()).thenReturn("/test/error");
        when(joinPoint.proceed()).thenThrow(new RuntimeException("Simulated Exception"));

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class,
                () -> requestResponseLogger.logHttpRequestResponse(joinPoint));
        assertEquals("Simulated Exception", exception.getMessage());
        assertTrue(logCaptor.getErrorLogs().stream()
                .anyMatch(log -> log.contains("HTTP EXCEPTION: [Method: GET, URI: /test/error, Error: Simulated Exception]")));
    }

    @Test
    void testLogHttpRequestResponse_NoAttributes() throws Throwable {
        // Arrange
        RequestContextHolder.resetRequestAttributes(); // Simulate no request context
        when(joinPoint.proceed()).thenReturn("No Attributes Response");

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act
        Object result = requestResponseLogger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("No Attributes Response", result);
        assertTrue(logCaptor.getWarnLogs().stream()
                .anyMatch(log -> log.contains("RequestContextHolder does not contain any request attributes. Skipping logging.")));
    }
}


<dependency>
    <groupId>nl.altindag</groupId>
    <artifactId>log-captor</artifactId>
    <version>3.0.1</version>
    <scope>test</scope>
</dependency>
-----------------------------------------------------------
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.4.8</version>
    <scope>test</scope>
</dependency>


import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.LoggerFactory;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RequestResponseLoggerTest {

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private RequestResponseLogger logger;

    @Mock
    private ProceedingJoinPoint joinPoint;

    private MockHttpServletRequest request;
    private MockHttpServletResponse response;

    private ListAppender<ILoggingEvent> logAppender;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        request = new MockHttpServletRequest();
        response = new MockHttpServletResponse();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response));

        // Set up Logback appender to capture logs
        Logger loggerInstance = (Logger) LoggerFactory.getLogger(RequestResponseLogger.class);
        logAppender = new ListAppender<>();
        logAppender.start();
        loggerInstance.addAppender(logAppender);
    }

 @Test
    void testLogHttpRequestResponse_Success() throws Throwable {
        // Arrange
        request.setMethod("POST");
        request.setRequestURI("/api/test");
        response.setStatus(200);

        when(joinPoint.proceed()).thenReturn("Success Response");
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"key\":\"value\"}");

        // Act
        Object result = logger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("Success Response", result);
        assertTrue(logAppender.list.stream().anyMatch(event ->
                event.getFormattedMessage().contains("HTTP REQUEST: [Method: POST, URI: /api/test, Body: {\"key\":\"value\"}]")));
        assertTrue(logAppender.list.stream().anyMatch(event ->
                event.getFormattedMessage().contains("HTTP RESPONSE: [Method: POST, URI: /api/test, Status: 200")));
    }

 @Test
    void testLogHttpRequestResponse_WithException() throws Throwable {
        // Arrange
        request.setMethod("GET");
        request.setRequestURI("/api/error");
        RuntimeException exception = new RuntimeException("Simulated Exception");

        when(joinPoint.proceed()).thenThrow(exception);

        // Act & Assert
        RuntimeException thrownException = assertThrows(RuntimeException.class, () -> logger.logHttpRequestResponse(joinPoint));
        assertEquals("Simulated Exception", thrownException.getMessage());

        assertTrue(logAppender.list.stream().anyMatch(event ->
                event.getFormattedMessage().contains("HTTP EXCEPTION: [Method: GET, URI: /api/error, Error: Simulated Exception]")));
    }

    @Test
    void testLogHttpRequestResponse_NoAttributes() throws Throwable {
        // Arrange
        RequestContextHolder.resetRequestAttributes();
        when(joinPoint.proceed()).thenReturn("Default Response");

        // Act
        Object result = logger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("Default Response", result);
        assertTrue(logAppender.list.stream().anyMatch(event ->
                event.getFormattedMessage().contains("RequestContextHolder does not contain any request attributes. Skipping logging.")));
    }

    @Test
    void testConvertObjectToJson_NullObject() {
        // Act
        String json = logger.convertObjectToJson(null);

        // Assert
        assertEquals("", json);
    }

    @Test
    void testGetRequestBody_ExceptionOnSerialization() throws Throwable {
        // Arrange
        Object mockObject = new Object();
        when(joinPoint.getArgs()).thenReturn(new Object[]{mockObject});
        when(objectMapper.writeValueAsString(mockObject)).thenThrow(new JsonProcessingException("Serialization Error") {});

        // Act
        String requestBody = logger.getRequestBody(joinPoint);

        // Assert
        assertTrue(logAppender.list.stream().anyMatch(event ->
                event.getFormattedMessage().contains("Error serializing request body")));
        assertEquals("", requestBody);
    }
}
------------------------------------
@Around("within(@org.springframework.web.bind.annotation.RestController *)")
public Object logHttpRequestResponse(ProceedingJoinPoint joinPoint) throws Exception {
    Optional<ServletRequestAttributes> optionalAttributes =
            Optional.ofNullable((ServletRequestAttributes) RequestContextHolder.getRequestAttributes());

    if (optionalAttributes.isEmpty()) {
        log.warn("RequestContextHolder does not contain any request attributes. Skipping logging.");
        return proceedSafely(joinPoint);
    }

    ServletRequestAttributes attributes = optionalAttributes.get();
    HttpServletRequest request = Optional.ofNullable(attributes.getRequest()).orElse(null);
    HttpServletResponse response = Optional.ofNullable(attributes.getResponse()).orElse(null);

    String requestBody = getRequestBody(joinPoint);
    log.info("HTTP REQUEST: [Method: {}, URI: {}, Body: {}]",
            Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
            Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
            requestBody
    );

    long startTime = System.currentTimeMillis();
    Object result;
    try {
        result = proceedSafely(joinPoint);
        if (result instanceof MyResponseType) {
            MyResponseType typedResult = (MyResponseType) result;
            log.debug("Typed Result: {}", typedResult);
        }
    } catch (Exception e) {
        log.error("HTTP EXCEPTION: [Method: {}, URI: {}, Error: {}]",
                Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
                Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
                e.getMessage());
        throw e; // Rethrow the exception
    }
    long duration = System.currentTimeMillis() - startTime;

    logResponse(request, response, result, duration);
    return result;
}

private void logResponse(HttpServletRequest request, HttpServletResponse response, Object result, long duration) {
    String responseBody = (response != null) ? convertObjectToJson(result) : "N/A";
    log.info("HTTP RESPONSE: [Method: {}, URI: {}, Status: {}, Time: {} ms, Body: {}]",
            Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
            Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
            response != null ? response.getStatus() : 0,
            duration,
            responseBody
    );
}
========================================
@Slf4j
@AllArgsConstructor
@Component
@Aspect
public class RequestResponseLogger {

    private final ObjectMapper objectMapper;

    @Around("within(@org.springframework.web.bind.annotation.RestController *)")
    public Object logHttpRequestResponse(ProceedingJoinPoint joinPoint) throws Exception {
        // Use Optional to wrap potentially null attributes
        Optional<ServletRequestAttributes> optionalAttributes = 
            Optional.ofNullable((ServletRequestAttributes) RequestContextHolder.getRequestAttributes());

        if (optionalAttributes.isEmpty()) {
            log.warn("RequestContextHolder does not contain any request attributes. Skipping logging.");
            return proceedSafely(joinPoint);
        }

        ServletRequestAttributes attributes = optionalAttributes.get();
        HttpServletRequest request = Optional.ofNullable(attributes.getRequest()).orElse(null);
        HttpServletResponse response = Optional.ofNullable(attributes.getResponse()).orElse(null);

        String requestBody = getRequestBody(joinPoint);
        log.info("HTTP REQUEST: [Method: {}, URI: {}, Body: {}]",
                Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
                Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
                requestBody
        );

        Object result;
        long startTime = System.currentTimeMillis();
        try {
            result = proceedSafely(joinPoint);
        } catch (Exception e) {
            log.error("HTTP EXCEPTION: [Method: {}, URI: {}, Error: {}]",
                    Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
                    Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
                    e.getMessage());
            throw e; // Rethrow the exception
        }
        long duration = System.currentTimeMillis() - startTime;

        String responseBody = response != null ? convertObjectToJson(result) : "N/A";
        log.info("HTTP RESPONSE: [Method: {}, URI: {}, Status: {}, Time: {} ms, Body: {}]",
                Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
                Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
                response != null ? response.getStatus() : 0,
                duration,
                responseBody
        );

        return result;
    }

    private Object proceedSafely(ProceedingJoinPoint joinPoint) throws Exception {
        try {
            return joinPoint.proceed();
        } catch (Throwable t) {
            if (t instanceof Exception) {
                throw (Exception) t;
            } else {
                throw new LoggingException("Unexpected error occurred", t);
            }
        }
    }

    private String getRequestBody(ProceedingJoinPoint joinPoint) {
        Object[] args = Optional.ofNullable(joinPoint.getArgs()).orElse(new Object[0]);
        if (args.length > 0) {
            try {
                return Arrays.stream(args)
                        .map(this::convertObjectToJson)
                        .reduce((arg1, arg2) -> arg1 + ", " + arg2)
                        .orElse("");
            } catch (Exception e) {
                log.error("Error serializing request body", e);
            }
        }
        return "";
    }

    private String convertObjectToJson(Object object) {
        if (object == null) return "";
        try {
            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(object);
        } catch (JsonProcessingException e) {
            log.error("Error serializing object to JSON", e);
            return "Error serializing object to JSON";
        }
    }
}

