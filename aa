package com.example.interceptor;

import com.example.util.LoggingUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

@Component
public class LoggingInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(LoggingInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        try {
            LoggingUtil.logRequest(request);
        } catch (Exception e) {
            logger.error("Exception occurred while logging request in preHandle: {}", e.getMessage(), e);
        }
        return true; // Allow request to proceed
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
        try {
            LoggingUtil.logResponse(response);

            // Log any exception thrown during request processing
            if (ex != null) {
                logger.error("Exception occurred during request processing: {}", ex.getMessage(), ex);
            }
        } catch (Exception e) {
            logger.error("Exception occurred while logging response in afterCompletion: {}", e.getMessage(), e);
        }
    }
}

---------------------------------------
package com.example.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;

public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void logRequest(HttpServletRequest request) {
        try {
            Map<String, Object> requestLog = Map.of(
                    "method", request.getMethod(),
                    "uri", request.getRequestURI(),
                    "query", request.getQueryString(),
                    "headers", Collections.list(request.getHeaderNames())
                            .stream()
                            .collect(Collectors.toMap(h -> h, request::getHeader)),
                    "body", getRequestBody(request)
            );
            logger.info("Request: {}", objectMapper.writeValueAsString(requestLog));
        } catch (Exception e) {
            logger.error("Error logging request: {}", e.getMessage(), e);
        }
    }

    public static void logResponse(HttpServletResponse response) {
        try {
            Map<String, Object> responseLog = Map.of(
                    "status", response.getStatus(),
                    "headers", response.getHeaderNames()
                            .stream()
                            .collect(Collectors.toMap(h -> h, response::getHeader))
            );
            logger.info("Response: {}", objectMapper.writeValueAsString(responseLog));
        } catch (Exception e) {
            logger.error("Error logging response: {}", e.getMessage(), e);
        }
    }

    private static String getRequestBody(HttpServletRequest request) {
        try (BufferedReader reader = request.getReader()) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (IOException e) {
            return "Error reading body: " + e.getMessage();
        }
    }
}
-----------------------------
package com.example.util;

import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.util.ContentCachingResponseWrapper;

public class ResponseWrapperUtil {

    public static String getResponseBody(ContentCachingResponseWrapper response) {
        try {
            byte[] content = response.getContentAsByteArray();
            return new String(content, response.getCharacterEncoding());
        } catch (Exception e) {
            return "Error reading response body: " + e.getMessage();
        }
    }
}
---------------------------------------
package com.example.interceptor;

import com.example.util.LoggingUtil;
import com.example.util.ResponseWrapperUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.util.ContentCachingResponseWrapper;

@Component
public class LoggingInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(LoggingInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        LoggingUtil.logRequest(request); // Log request
        return true;
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(response);
        try {
            LoggingUtil.logResponse(response); // Log headers and status

            // Log response body in JSON format
            String responseBody = ResponseWrapperUtil.getResponseBody(responseWrapper);
            logger.info("Response Body: {}", responseBody);
        } catch (Exception e) {
            logger.error("Error logging response body: {}", e.getMessage(), e);
        } finally {
            try {
                responseWrapper.copyBodyToResponse(); // Ensure response body is forwarded correctly
            } catch (Exception e) {
                logger.error("Error copying response body: {}", e.getMessage(), e);
            }
        }
    }
}
-------------------------------------------
package com.example.config;

import com.example.interceptor.LoggingInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Autowired
    private LoggingInterceptor loggingInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(loggingInterceptor)
                .addPathPatterns("/**") // Apply to all endpoints
                .excludePathPatterns("/health", "/metrics"); // Exclude specific endpoints
    }
}

