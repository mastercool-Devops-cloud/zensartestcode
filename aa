import javax.annotation.PostConstruct;
import java.util.Properties;

@Configuration
public class DynamicDatabaseConfig {

    @Autowired
    private ConfigurableEnvironment environment;

    @PostConstruct
    public void setDatabaseProperties() {
        Properties props = new Properties();
        // Fetch these values from a secure location or environment variables
        String dynamicUsername = "myDynamicUser"; // Example, should fetch dynamically
        String dynamicPassword = "myDynamicPassword"; // Example, should fetch dynamically

        props.put("db.username", dynamicUsername);
        props.put("db.password", dynamicPassword);

        PropertiesPropertySource propertySource = new PropertiesPropertySource("dynamicProperties", props);
        environment.getPropertySources().addFirst(propertySource);
    }
}


---------------------------------------------------------------------------------------------------------------------
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;

@Configuration
public class DataSourceConfig {

    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(driverClassName);
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);

        return dataSource;
    }
}

