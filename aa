import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;

@Component
public class ResponseCachingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (response instanceof HttpServletResponse) {
            HttpServletResponse httpResponse = (HttpServletResponse) response;

            // Wrap the response with ContentCachingResponseWrapper
            ContentCachingResponseWrapper wrappedResponse = new ContentCachingResponseWrapper(httpResponse);

            try {
                // Pass the response to the next filter
                chain.doFilter(request, wrappedResponse);

                // Log the response
                LoggingUtil.logResponseWithBody(wrappedResponse);
            } catch (Exception ex) {
                // Log exceptions if needed
                LoggingUtil.logException(ex);
                throw ex;
            } finally {
                // Ensure the response body is written back to the client
                wrappedResponse.copyBodyToResponse();
            }
        } else {
            // Pass through non-HTTP responses
            chain.doFilter(request, response);
        }
    }
}
------------------------------
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.util.ContentCachingRequestWrapper;

import java.io.IOException;

@Component
public class RequestCachingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest) {
            HttpServletRequest httpRequest = (HttpServletRequest) request;

            // Wrap the request with ContentCachingRequestWrapper
            ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(httpRequest);

            try {
                // Log the request
                LoggingUtil.logRequest(wrappedRequest);

                // Pass the request to the next filter
                chain.doFilter(wrappedRequest, response);
            } catch (Exception ex) {
                // Log exceptions if needed
                LoggingUtil.logException(ex);
                throw ex;
            }
        } else {
            // Pass through non-HTTP requests
            chain.doFilter(request, response);
        }
    }
}
