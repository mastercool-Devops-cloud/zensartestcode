package com.example.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;

public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void logRequest(HttpServletRequest request) {
        try {
            Map<String, Object> requestLog = Map.of(
                    "method", request.getMethod(),
                    "uri", request.getRequestURI(),
                    "query", request.getQueryString(),
                    "headers", Collections.list(request.getHeaderNames())
                            .stream()
                            .collect(Collectors.toMap(h -> h, request::getHeader)),
                    "body", getRequestBody(request)
            );
            logger.info("Request: {}", objectMapper.writeValueAsString(requestLog));
        } catch (Exception e) {
            logger.error("Error logging request: {}", e.getMessage(), e);
        }
    }

    public static void logResponse(HttpServletResponse response) {
        try {
            Map<String, Object> responseLog = Map.of(
                    "status", response.getStatus(),
                    "headers", response.getHeaderNames()
                            .stream()
                            .collect(Collectors.toMap(h -> h, response::getHeader))
            );
            logger.info("Response: {}", objectMapper.writeValueAsString(responseLog));
        } catch (Exception e) {
            logger.error("Error logging response: {}", e.getMessage(), e);
        }
    }

    private static String getRequestBody(HttpServletRequest request) {
        try (BufferedReader reader = request.getReader()) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (IOException e) {
            return "Error reading body: " + e.getMessage();
        }
    }
}
