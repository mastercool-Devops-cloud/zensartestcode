import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.Mockito.*;

class RequestCachingLoggingFilterTest {

    private RequestCachingLoggingFilter filter;
    private FilterChain mockFilterChain;
    private ServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        filter = new RequestCachingLoggingFilter();
        mockFilterChain = mock(FilterChain.class);
        mockResponse = mock(ServletResponse.class);
    }

    @Test
    void testDoFilterWithHttpServletRequest() throws IOException, ServletException {
        // Mock HttpServletRequest
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        ServletInputStream mockInputStream = createMockServletInputStream("test body content");

        // Stub getInputStream method
        when(mockRequest.getInputStream()).thenReturn(mockInputStream);

        // Call the filter
        filter.doFilter(mockRequest, mockResponse, mockFilterChain);

        // Verify that LoggingUtil.logRequest() and filterChain.doFilter() are called
        verify(mockFilterChain, times(1)).doFilter(any(CachedBodyHttpServletRequestWapper.class), eq(mockResponse));
    }

    @Test
    void testDoFilterWithoutHttpServletRequest() throws IOException, ServletException {
        // Mock a non-HttpServletRequest request
        ServletRequest mockRequest = mock(ServletRequest.class);

        // Call the filter
        filter.doFilter(mockRequest, mockResponse, mockFilterChain);

        // Verify that the filter passes through unwrapped requests
        verify(mockFilterChain, times(1)).doFilter(mockRequest, mockResponse);
    }

    private ServletInputStream createMockServletInputStream(String content) {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(content.getBytes());
        return new ServletInputStream() {
            @Override
            public boolean isFinished() {
                return byteArrayInputStream.available() == 0;
            }

            @Override
            public boolean isReady() {
                return true;
            }

            @Override
            public void setReadListener(javax.servlet.ReadListener readListener) {
                // No-op for this mock
            }

            @Override
            public int read() {
                return byteArrayInputStream.read();
            }
        };
    }
}
------------------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import static org.mockito.Mockito.*;

class ResponseCachingLoggingFilterTest {

    private ResponseCachingLoggingFilter filter;
    private FilterChain mockFilterChain;
    private HttpServletRequest mockRequest;
    private HttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        filter = new ResponseCachingLoggingFilter();
        mockFilterChain = mock(FilterChain.class);
        mockRequest = mock(HttpServletRequest.class);
        mockResponse = mock(HttpServletResponse.class);
    }

    @Test
    void testDoFilterWithHttpServletRequest() throws IOException, ServletException {
        // Mock wrapped response
        CachedCachingResponseWapper mockWrappedResponse = mock(CachedCachingResponseWapper.class);
        doNothing().when(mockWrappedResponse).copyBodyToResponse();

        // Call the filter
        filter.doFilter(mockRequest, mockWrappedResponse, mockFilterChain);

        // Verify that the wrapped response was used
        verify(mockFilterChain, times(1)).doFilter(eq(mockRequest), eq(mockWrappedResponse));
        verify(mockWrappedResponse, times(1)).copyBodyToResponse();
        verifyStatic(LoggingUtil.class, times(1));
        LoggingUtil.logResponse();
    }

    @Test
    void testDoFilterWithoutHttpServletRequest() throws IOException, ServletException {
        // Mock a non-HttpServletRequest request
        ServletRequest nonHttpRequest = mock(ServletRequest.class);

        // Call the filter
        filter.doFilter(nonHttpRequest, mockResponse, mockFilterChain);

        // Verify that the filter passes through unwrapped requests
        verify(mockFilterChain, times(1)).doFilter(nonHttpRequest, mockResponse);
        verifyNoInteractions(mockResponse);
    }

    @Test
    void testDoFilterWithException() throws IOException, ServletException {
        // Mock wrapped response
        CachedCachingResponseWapper mockWrappedResponse = mock(CachedCachingResponseWapper.class);
        doThrow(new RuntimeException("Test Exception")).when(mockFilterChain).doFilter(mockRequest, mockWrappedResponse);

        // Call the filter and expect an exception
        try {
            filter.doFilter(mockRequest, mockWrappedResponse, mockFilterChain);
        } catch (Exception e) {
            // Verify that the exception is logged
            verifyStatic(LoggingUtil.class, times(1));
            LoggingUtil.logException(any(Exception.class));

            // Verify that the response copyBodyToResponse was not called
            verify(mockWrappedResponse, never()).copyBodyToResponse();
        }
    }
}
-----------------------------------
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;
import com.example.config.ApplicationProperties;  // Adjust package accordingly

@ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class)
@SpringBootTest
@TestPropertySource(properties = "spring.application.name=TestApplication")
class ApplicationPropertiesTest {

    @Autowired
    private ApplicationProperties applicationProperties;

    @Test
    void testApplicationName() {
        assertNotNull(applicationProperties);
        assertEquals("TestApplication", applicationProperties.getApplication());
    }
}
-----------------------------------------------
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.example.config.ApplicationProperties;
import com.example.config.EnvironmentName;
import com.example.config.LoggingFilterConfig;
import com.example.filter.RequestLogFilter;
import com.example.filter.ResponseLogFilter;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
class LoggingFilterConfigTest {

    @Mock
    private ApplicationProperties applicationProperties;

    @Mock
    private EnvironmentName environmentName;

    @InjectMocks
    private LoggingFilterConfig loggingFilterConfig;

    @BeforeEach
    void setUp() {
        when(applicationProperties.getApplication()).thenReturn("TestApplication");
        when(environmentName.getActiveProfile()).thenReturn("TestEnvironment");
    }

    @Test
    void testRequestLogFilterBeanCreation() {
        RequestLogFilter requestLogFilter = loggingFilterConfig.requestLogFilter();
        
        assertNotNull(requestLogFilter);
        assertEquals("TestApplication", requestLogFilter.getApplicationName());
        assertEquals("TestEnvironment", requestLogFilter.getEnvironmentName());
    }

    @Test
    void testResponseLogFilterBeanCreation() {
        ResponseLogFilter responseLogFilter = loggingFilterConfig.responseLogFilter();
        
        assertNotNull(responseLogFilter);
        assertEquals("TestApplication", responseLogFilter.getApplicationName());
        assertEquals("TestEnvironment", responseLogFilter.getEnvironmentName());
    }
}
-----------------------------
java.lang.NullPointerException: Cannot invoke "org.springframework.core.env.Environment.getActiveProfiles()" because "com.sb.fedssimplification.cashflowcalculator.config.EnvironmentName.environment" is null

	at com.sb.fedssimplification.cashflowcalculator.config.EnvironmentName.getActiveProfile(EnvironmentName.java:22)
	at com.sb.fedssimplification.cashflowcalculator.config.LoggingFilterConfigTest.setUp(LoggingFilterConfigTest.java:32)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
