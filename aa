import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

class ResponseLogProcessorTest {

    private ResponseLogProcessor responseLogProcessor;

    @Mock
    private HttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        responseLogProcessor = new ResponseLogProcessor();
    }

    @Test
    void testProcess_ValidHttpResponse() {
        Map<String, String> mapData = new HashMap<>();

        // Act
        assertDoesNotThrow(() -> responseLogProcessor.process(mockResponse, mapData));

        // Verify that HttpResponseLoggingHelper.buildLogRequest() is called
        verify(mockResponse, times(0)).getStatus(); // Adjust this based on actual HttpResponseLoggingHelper behavior
    }

    @Test
    void testProcess_InvalidObject_ThrowsException() {
        Map<String, String> mapData = new HashMap<>();
        Object invalidObject = new Object(); // Not an HttpServletResponse

        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
                responseLogProcessor.process(invalidObject, mapData)
        );

        assertEquals("Invalid object type for ResponseLogProcessor", exception.getMessage());
    }
}
