import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.apache.http.HttpStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.MockedStatic;

@ExtendWith(MockitoExtension.class)
class RequestLogFilterTest {

    private RequestLogFilter requestLogFilter;

    @Mock
    private HttpServletRequest httpRequest;

    @Mock
    private HttpServletResponse httpResponse;

    @Mock
    private FilterChain filterChain;

    @Mock
    private CachedBodyHttpServletRequestWrapper cachedRequestWrapper;

    @BeforeEach
    void setUp() {
        requestLogFilter = new RequestLogFilter("test-app", "test-env");
    }

    @Test
    void testDoFilter_Success() throws IOException, ServletException {
        // Mock HTTP request behavior
        when(httpRequest.getMethod()).thenReturn("POST");
        when(httpRequest.getRequestURI()).thenReturn("/test-endpoint");
        when(httpRequest.getHeader("Content-Length")).thenReturn("200");
        when(httpRequest.getContentType()).thenReturn("application/json");
        when(httpRequest.getHeader("User-Agent")).thenReturn("JUnit Test");
        when(httpResponse.getStatus()).thenReturn(200);

        // Mock request body retrieval
        Map<String, String> requestBody = Collections.singletonMap("key", "value");

        try (
            MockedStatic<CachedBodyHttpServletRequestWrapper> mockWrapper = mockStatic(CachedBodyHttpServletRequestWrapper.class);
            MockedStatic<HttpRequestLogHelper> mockLogHelper = mockStatic(HttpRequestLogHelper.class);
            MockedStatic<LogProcessorFactory> mockLogProcessor = mockStatic(LogProcessorFactory.class)
        ) {
            // Mock behavior for CachedBodyHttpServletRequestWrapper
            mockWrapper.when(() -> new CachedBodyHttpServletRequestWrapper(httpRequest)).thenReturn(cachedRequestWrapper);

            // Mock behavior for extracting request body
            mockLogHelper.when(() -> HttpRequestLogHelper.getRequestBody(any())).thenReturn(requestBody);

            // Execute filter
            requestLogFilter.doFilter(httpRequest, httpResponse, filterChain);

            // Verify that CachedBodyHttpServletRequestWrapper is used
            mockWrapper.verify(() -> new CachedBodyHttpServletRequestWrapper(httpRequest), times(1));

            // Verify that request log is created
            mockLogProcessor.verify(() -> LogProcessorFactory.processLog(
                argThat(log -> log instanceof RestLog), eq(LogType.REQUEST)
            ), times(1));

            // Ensure filter chain continues execution
            verify(filterChain, times(1)).doFilter(any(HttpServletRequest.class), any(HttpServletResponse.class));
        }
    }

    @Test
    void testDoFilter_ExceptionHandling() throws IOException, ServletException {
        when(httpRequest.getMethod()).thenReturn("POST");
        when(httpRequest.getRequestURI()).thenReturn("/test-endpoint");

        try (
            MockedStatic<CachedBodyHttpServletRequestWrapper> mockWrapper = mockStatic(CachedBodyHttpServletRequestWrapper.class);
            MockedStatic<LogProcessorFactory> mockLogProcessor = mockStatic(LogProcessorFactory.class)
        ) {
            // Simulate exception during filter processing
            mockWrapper.when(() -> new CachedBodyHttpServletRequestWrapper(httpRequest))
                       .thenThrow(new RuntimeException("Test Exception"));

            Exception exception = assertThrows(RuntimeException.class, () -> 
                requestLogFilter.doFilter(httpRequest, httpResponse, filterChain)
            );

            assertEquals("Test Exception", exception.getMessage());

            // Verify error logging
            mockLogProcessor.verify(() -> LogProcessorFactory.processLog(
                argThat(log -> log instanceof ErrorLog), eq(LogType.ERROR)
            ), times(1));
        }
    }
}
