import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.nio.charset.StandardCharsets;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

class LoggingUtilTest {

    private MockHttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockResponse = new MockHttpServletResponse();
    }

    @Test
    void testLogResponse_WithValidResponse() {
        // Wrap the response to enable caching
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Set mock data for the response
        responseWrapper.setStatus(200);
        responseWrapper.addHeader("Content-Type", "application/json");
        responseWrapper.addHeader("Authorization", "Bearer dummy-token");
        responseWrapper.getOutputStream().write("{\"message\":\"Success\"}".getBytes(StandardCharsets.UTF_8));
        responseWrapper.copyBodyToResponse();

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(responseWrapper));
    }

    @Test
    void testLogResponse_WithEmptyHeaders() {
        // Wrap the response to enable caching
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Set status code and empty headers
        responseWrapper.setStatus(204);
        responseWrapper.getOutputStream().write("".getBytes(StandardCharsets.UTF_8));
        responseWrapper.copyBodyToResponse();

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(responseWrapper));
    }

    @Test
    void testLogResponse_WithNullResponse() {
        // Call the method with a null response
        assertDoesNotThrow(() -> LoggingUtil.logResponse(null));
    }

    @Test
    void testLogResponse_WithNonCachingResponse() {
        // Call the method with a non-caching response
        assertDoesNotThrow(() -> LoggingUtil.logResponse(mockResponse));
    }

    @Test
    void testLogResponse_WithExceptionDuringLogging() {
        // Wrap the response
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Simulate a response body that throws an exception during logging
        ContentCachingResponseWrapper faultyResponse = mock(ContentCachingResponseWrapper.class);
        when(faultyResponse.getContentAsByteArray()).thenThrow(new RuntimeException("Simulated exception"));
        when(faultyResponse.getStatus()).thenReturn(500);

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(faultyResponse));
    }
}
-------------------------------------------
package com.bootcamptoprod.request.cache;

import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.*;

class CachedBodyHttpServletRequestTest {

    private MockHttpServletRequest mockRequest;

    @BeforeEach
    void setUp() {
        mockRequest = new MockHttpServletRequest();
    }

    @Test
    void testCachedBodyHttpServletRequest_WithValidBody() throws IOException {
        // Set up a request body
        String requestBody = "{\"key\":\"value\"}";
        mockRequest.setContent(requestBody.getBytes(StandardCharsets.UTF_8));

        // Create the CachedBodyHttpServletRequest
        CachedBodyHttpServletRequest cachedRequest = new CachedBodyHttpServletRequest(mockRequest);

        // Verify the body is cached correctly
        ServletInputStream inputStream = cachedRequest.getInputStream();
        String cachedBody = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        assertEquals(requestBody, cachedBody);
    }

    @Test
    void testCachedBodyHttpServletRequest_WithEmptyBody() throws IOException {
        // Set up an empty request body
        mockRequest.setContent(new byte[0]);

        // Create the CachedBodyHttpServletRequest
        CachedBodyHttpServletRequest cachedRequest = new CachedBodyHttpServletRequest(mockRequest);

        // Verify the body is empty
        ServletInputStream inputStream = cachedRequest.getInputStream();
        String cachedBody = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        assertEquals("", cachedBody);
    }

    @Test
    void testCachedBodyHttpServletRequest_WithNullBody() throws IOException {
        // Do not set any content in the mock request (null body)

        // Create the CachedBodyHttpServletRequest
        CachedBodyHttpServletRequest cachedRequest = new CachedBodyHttpServletRequest(mockRequest);

        // Verify the body is empty (as null is treated as empty)
        ServletInputStream inputStream = cachedRequest.getInputStream();
        String cachedBody = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        assertEquals("", cachedBody);
    }

    @Test
    void testCachedBodyHttpServletRequest_MultipleReads() throws IOException {
        // Set up a request body
        String requestBody = "Multiple Reads Test";
        mockRequest.setContent(requestBody.getBytes(StandardCharsets.UTF_8));

        // Create the CachedBodyHttpServletRequest
        CachedBodyHttpServletRequest cachedRequest = new CachedBodyHttpServletRequest(mockRequest);

        // Read the input stream multiple times
        ServletInputStream inputStream1 = cachedRequest.getInputStream();
        String firstRead = new String(inputStream1.readAllBytes(), StandardCharsets.UTF_8);

        ServletInputStream inputStream2 = cachedRequest.getInputStream();
        String secondRead = new String(inputStream2.readAllBytes(), StandardCharsets.UTF_8);

        // Verify that multiple reads give the same body
        assertEquals(requestBody, firstRead);
        assertEquals(requestBody, secondRead);
    }

    @Test
    void testCachedBodyHttpServletRequest_WithLargeBody() throws IOException {
        // Generate a large request body
        String largeBody = "A".repeat(10_000); // 10,000 characters
        mockRequest.setContent(largeBody.getBytes(StandardCharsets.UTF_8));

        // Create the CachedBodyHttpServletRequest
        CachedBodyHttpServletRequest cachedRequest = new CachedBodyHttpServletRequest(mockRequest);

        // Verify the body is cached correctly
        ServletInputStream inputStream = cachedRequest.getInputStream();
        String cachedBody = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        assertEquals(largeBody, cachedBody);
    }
}
-----------------------------------------------
import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.*;

class CachedBodyServletInputStreamTest {

    private CachedBodyServletInputStream cachedBodyServletInputStream;
    private byte[] testData;

    @BeforeEach
    void setUp() {
        testData = "Test data for CachedBodyServletInputStream".getBytes(StandardCharsets.UTF_8);
        cachedBodyServletInputStream = new CachedBodyServletInputStream(testData);
    }

    @Test
    void testReadData() throws IOException {
        // Read data byte by byte and reconstruct the string
        StringBuilder result = new StringBuilder();
        int read;
        while ((read = cachedBodyServletInputStream.read()) != -1) {
            result.append((char) read);
        }

        // Verify the reconstructed string matches the input
        assertEquals(new String(testData, StandardCharsets.UTF_8), result.toString());
    }

    @Test
    void testIsFinished_InitiallyFalse() {
        // Verify that the stream is not finished initially
        assertFalse(cachedBodyServletInputStream.isFinished());
    }

    @Test
    void testIsFinished_AfterReadingAllBytes() throws IOException {
        // Read all bytes
        while (cachedBodyServletInputStream.read() != -1) {
            // Continue reading
        }

        // Verify that the stream is finished after reading all bytes
        assertTrue(cachedBodyServletInputStream.isFinished());
    }

    @Test
    void testIsReady_AlwaysTrue() {
        // Verify that the isReady method always returns true
        assertTrue(cachedBodyServletInputStream.isReady());
    }

    @Test
    void testRead_EmptyStream() throws IOException {
        // Create a stream with an empty body
        CachedBodyServletInputStream emptyStream = new CachedBodyServletInputStream(new byte[0]);

        // Verify that read returns -1 for an empty stream
        assertEquals(-1, emptyStream.read());
        assertTrue(emptyStream.isFinished());
    }

    @Test
    void testSetReadListener() {
        // Verify that setReadListener does not throw an exception
        assertDoesNotThrow(() -> cachedBodyServletInputStream.setReadListener(new ReadListener() {
            @Override
            public void onDataAvailable() throws IOException {
            }

            @Override
            public void onAllDataRead() throws IOException {
            }

            @Override
            public void onError(Throwable throwable) {
            }
        }));
    }
}
-----------------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

class EnvironmentUtilTest {

    @Mock
    private Environment mockEnvironment;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // Simulate @PostConstruct behavior by setting the static field
        ReflectionTestUtils.setField(EnvironmentUtil.class, "environment", mockEnvironment);
    }

    @Test
    void testGetActiveProfile_WhenActiveProfileExists() {
        // Mock the behavior of the Environment
        when(mockEnvironment.getActiveProfiles()).thenReturn(new String[]{"dev"});

        // Assert the active profile is returned correctly
        assertEquals("dev", EnvironmentUtil.getActiveProfile());
    }

    @Test
    void testGetActiveProfile_WhenNoActiveProfiles() {
        // Mock the behavior of the Environment with no active profiles
        when(mockEnvironment.getActiveProfiles()).thenReturn(new String[]{});

        // Assert the default profile is returned
        assertEquals("default", EnvironmentUtil.getActiveProfile());
    }

    @Test
    void testGetActiveProfile_WhenMultipleActiveProfiles() {
        // Mock the behavior of the Environment with multiple active profiles
        when(mockEnvironment.getActiveProfiles()).thenReturn(new String[]{"test", "prod"});

        // Assert the first active profile is returned
        assertEquals("test", EnvironmentUtil.getActiveProfile());
    }
}

-----------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ApplicationPropertiesTest {

    private ApplicationProperties applicationProperties;

    @BeforeEach
    void setUp() {
        applicationProperties = new ApplicationProperties();
    }

    @Test
    void testGetApplicationName_WhenApplicationNameIsSet() {
        // Simulate @Value injection by directly setting the private field
        ReflectionTestUtils.setField(applicationProperties, "applicationName", "TestApp");

        // Simulate @PostConstruct initialization
        ReflectionTestUtils.invokeMethod(applicationProperties, "init");

        // Assert the static method returns the expected value
        assertEquals("TestApp", ApplicationProperties.getApplicationName());
    }

    @Test
    void testGetApplicationName_WhenApplicationNameIsNull() {
        // Simulate @Value injection with a null value
        ReflectionTestUtils.setField(applicationProperties, "applicationName", null);

        // Simulate @PostConstruct initialization
        ReflectionTestUtils.invokeMethod(applicationProperties, "init");

        // Assert the static method returns null (or handle null case if required)
        assertEquals(null, ApplicationProperties.getApplicationName());
    }
}
