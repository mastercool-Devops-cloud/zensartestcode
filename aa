import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Map;

public class HttpResponseLogHelperTest {

    @Mock
    private ContentCachingResponseWrapper mockResponseWrapper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetResponseBody_Success() throws IOException {
        // Mock JSON response body
        String jsonResponse = "{ \"status\": \"success\", \"message\": \"OK\" }";
        byte[] responseBytes = jsonResponse.getBytes(StandardCharsets.UTF_8);

        // Mock response behavior
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(responseBytes);

        // Call method under test
        Map<String, String> result = HttpResponseLogHelper.getResponseBody(mockResponseWrapper);

        // Assertions
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("success", result.get("status"));
        assertEquals("OK", result.get("message"));
    }

    @Test
    void testGetResponseBody_EmptyResponse_ReturnsEmptyMap() {
        // Mock empty response body
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(new byte[0]);

        // Call method under test
        Map<String, String> result = HttpResponseLogHelper.getResponseBody(mockResponseWrapper);

        // Assertions
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetResponseBody_InvalidJson_ThrowsException() {
        // Mock invalid JSON response
        String invalidJsonResponse = "{ status: success, message: "; // Malformed JSON
        byte[] responseBytes = invalidJsonResponse.getBytes(StandardCharsets.UTF_8);

        // Mock response behavior
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(responseBytes);

        // Exception handling
        Exception exception = assertThrows(RuntimeException.class, () -> {
            HttpResponseLogHelper.getResponseBody(mockResponseWrapper);
        });

        assertTrue(exception.getMessage().contains("Error reading response body"));
    }

    @Test
    void testGetStatusInfo_ValidCode() {
        HttpStatus status = HttpResponseLogHelper.getStatusInfo(200);
        assertEquals(HttpStatus.OK, status);
    }

    @Test
    void testGetStatusInfo_InvalidCode_ThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> {
            HttpResponseLogHelper.getStatusInfo(999); // Invalid status code
        });
    }
}
