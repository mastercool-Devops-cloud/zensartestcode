import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.util.ReflectionTestUtils;

import javax.sql.DataSource;
import java.text.ParseException;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@TestPropertySource(properties = {
    "cyberarc.uat.url=http://example.com/your-uat-url",
    "spring.datasource.url=jdbc:h2:mem:testdb",
    "spring.datasource.driver-class-name=org.h2.Driver"
})
@ExtendWith(MockitoExtension.class)
public class DataSourceConfigTest {

    @Autowired
    private DataSourceConfig dataSourceConfig;

    @MockBean
    private FxPasswordSubscriber fxPasswordSubscriber;

    @BeforeEach
    void setUp() {
        // Setting up mocks and test environment
    }

    @Test
    void testDataSource() throws ParseException {
        DataSource dataSource = dataSourceConfig.dataSource();
        assertNotNull(dataSource);
        assertTrue(dataSource instanceof DriverManagerDataSource);
        DriverManagerDataSource driverManagerDataSource = (DriverManagerDataSource) dataSource;
        assertEquals("jdbc:h2:mem:testdb", driverManagerDataSource.getUrl());

        // Use reflection to access the private driverClassName field
        String driverClassName = (String) ReflectionTestUtils.getField(driverManagerDataSource, "driverClassName");
        assertEquals("org.h2.Driver", driverClassName);
    }
}
