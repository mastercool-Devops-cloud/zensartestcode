import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.nio.charset.StandardCharsets;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

class LoggingUtilTest {

    private MockHttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockResponse = new MockHttpServletResponse();
    }

    @Test
    void testLogResponse_WithValidResponse() {
        // Wrap the response to enable caching
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Set mock data for the response
        responseWrapper.setStatus(200);
        responseWrapper.addHeader("Content-Type", "application/json");
        responseWrapper.addHeader("Authorization", "Bearer dummy-token");
        responseWrapper.getOutputStream().write("{\"message\":\"Success\"}".getBytes(StandardCharsets.UTF_8));
        responseWrapper.copyBodyToResponse();

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(responseWrapper));
    }

    @Test
    void testLogResponse_WithEmptyHeaders() {
        // Wrap the response to enable caching
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Set status code and empty headers
        responseWrapper.setStatus(204);
        responseWrapper.getOutputStream().write("".getBytes(StandardCharsets.UTF_8));
        responseWrapper.copyBodyToResponse();

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(responseWrapper));
    }

    @Test
    void testLogResponse_WithNullResponse() {
        // Call the method with a null response
        assertDoesNotThrow(() -> LoggingUtil.logResponse(null));
    }

    @Test
    void testLogResponse_WithNonCachingResponse() {
        // Call the method with a non-caching response
        assertDoesNotThrow(() -> LoggingUtil.logResponse(mockResponse));
    }

    @Test
    void testLogResponse_WithExceptionDuringLogging() {
        // Wrap the response
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(mockResponse);

        // Simulate a response body that throws an exception during logging
        ContentCachingResponseWrapper faultyResponse = mock(ContentCachingResponseWrapper.class);
        when(faultyResponse.getContentAsByteArray()).thenThrow(new RuntimeException("Simulated exception"));
        when(faultyResponse.getStatus()).thenReturn(500);

        // Assert no exceptions during logging
        assertDoesNotThrow(() -> LoggingUtil.logResponse(faultyResponse));
    }
}
