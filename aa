@Slf4j
@AllArgsConstructor
@Component
@Aspect
public class RequestResponseLogger {

    private final ObjectMapper objectMapper;

    @Around("@annotation(org.springframework.web.bind.annotation.RequestMapping) || " +
            "@annotation(org.springframework.web.bind.annotation.PostMapping) || " +
            "@annotation(org.springframework.web.bind.annotation.GetMapping)")
    public Object logHttpRequestResponse(ProceedingJoinPoint joinPoint) throws Exception {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();

        if (attributes == null) {
            log.warn("RequestContextHolder does not contain any request attributes. Skipping logging.");
            return proceedSafely(joinPoint);
        }

        HttpServletRequest request = attributes.getRequest();
        HttpServletResponse response = attributes.getResponse();

        String requestBody = getRequestBody(joinPoint);
        log.info("Request: Method: {}, URI: {}, Body: {}",
                request.getMethod(),
                request.getRequestURI(),
                requestBody
        );

        Object result;
        long startTime = System.currentTimeMillis();
        try {
            result = proceedSafely(joinPoint);
        } catch (Exception e) {
            log.error("Exception: Method: {}, URI: {} failed with exception",
                    request.getMethod(),
                    request.getRequestURI(),
                    e);
            throw e; // Rethrow the exception
        }
        long duration = System.currentTimeMillis() - startTime;

        if (response != null) {
            String responseBody = convertObjectToJson(result);
            log.info("Response: Method: {}, URI: {}, Status: {} - Body: {}, Time Taken: {} ms",
                    request.getMethod(),
                    request.getRequestURI(),
                    response.getStatus(),
                    responseBody,
                    duration
            );
        } else {
            log.warn("HttpServletResponse is null. Skipping response logging.");
        }

        return result;
    }

    private Object proceedSafely(ProceedingJoinPoint joinPoint) throws Exception {
        try {
            return joinPoint.proceed();
        } catch (Throwable t) {
            // Wrap or rethrow Throwable as Exception
            if (t instanceof Exception) {
                throw (Exception) t;
            } else {
                throw new RuntimeException("Unexpected error occurred", t);
            }
        }
    }

    private String getRequestBody(ProceedingJoinPoint joinPoint) {
        Object[] args = joinPoint.getArgs();
        if (args.length > 0) {
            try {
                return Arrays.stream(args)
                        .map(this::convertObjectToJson)
                        .reduce((arg1, arg2) -> arg1 + ", " + arg2)
                        .orElse("");
            } catch (Exception e) {
                log.error("Error serializing request body", e);
            }
        }
        return "";
    }

    private String convertObjectToJson(Object object) {
        if (object == null) return "";
        try {
            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(object);
        } catch (JsonProcessingException e) {
            log.error("Error serializing object to JSON", e);
            return "Error serializing object to JSON";
        }
    }
}
else {
            log.warn("HTTP RESPONSE: [Method: {}, URI: {}, Status: {}, Time: {} ms, Body: {}] - Response object is null",
                    request.getMethod(),
                    request.getRequestURI(),
                    0,
                    duration,
                    "N/A");
        }
-------------------------------------------
@ExtendWith(MockitoExtension.class)
class RequestResponseLoggerTest {

    @InjectMocks
    private RequestResponseLogger requestResponseLogger;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private ProceedingJoinPoint joinPoint;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @BeforeEach
    void setup() {
        // Set up RequestContextHolder to provide mock request attributes
        ServletRequestAttributes attributes = new ServletRequestAttributes(request, response);
        RequestContextHolder.setRequestAttributes(attributes);
    }

    @Test
    void testLogHttpRequestResponse_Success() throws Throwable {
        // Arrange
        when(request.getMethod()).thenReturn("POST");
        when(request.getRequestURI()).thenReturn("/test/api");
        when(joinPoint.proceed()).thenReturn("Success Response");
        when(objectMapper.writeValueAsString(any())).thenReturn("{\"key\":\"value\"}");
        when(response.getStatus()).thenReturn(200);

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act
        Object result = requestResponseLogger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("Success Response", result);
        assertTrue(logCaptor.getInfoLogs().stream()
                .anyMatch(log -> log.contains("HTTP REQUEST: [Method: POST, URI: /test/api, Body: {\"key\":\"value\"}]")));
        assertTrue(logCaptor.getInfoLogs().stream()
                .anyMatch(log -> log.contains("HTTP RESPONSE: [Method: POST, URI: /test/api, Status: 200, Time: ")));
    }

    @Test
    void testLogHttpRequestResponse_Exception() throws Throwable {
        // Arrange
        when(request.getMethod()).thenReturn("GET");
        when(request.getRequestURI()).thenReturn("/test/error");
        when(joinPoint.proceed()).thenThrow(new RuntimeException("Simulated Exception"));

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class,
                () -> requestResponseLogger.logHttpRequestResponse(joinPoint));
        assertEquals("Simulated Exception", exception.getMessage());
        assertTrue(logCaptor.getErrorLogs().stream()
                .anyMatch(log -> log.contains("HTTP EXCEPTION: [Method: GET, URI: /test/error, Error: Simulated Exception]")));
    }

    @Test
    void testLogHttpRequestResponse_NoAttributes() throws Throwable {
        // Arrange
        RequestContextHolder.resetRequestAttributes(); // Simulate no request context
        when(joinPoint.proceed()).thenReturn("No Attributes Response");

        LogCaptor logCaptor = LogCaptor.forClass(RequestResponseLogger.class);

        // Act
        Object result = requestResponseLogger.logHttpRequestResponse(joinPoint);

        // Assert
        assertEquals("No Attributes Response", result);
        assertTrue(logCaptor.getWarnLogs().stream()
                .anyMatch(log -> log.contains("RequestContextHolder does not contain any request attributes. Skipping logging.")));
    }
}

