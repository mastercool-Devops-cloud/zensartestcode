import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.util.ResourceUtils;

import javax.net.ssl.SSLContext;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FxPasswordClientTest {

    @Mock
    private HttpClient httpClient;

    @Mock
    private HttpResponse<String> httpResponse;

    @InjectMocks
    private FxPasswordClient fxPasswordClient;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(fxPasswordClient, "keystorePath", "classpath:keystore.jks");
    }

    @Test
    void testRequestCyberArcPassword_Success() throws Exception {
        String cyberArcUrl = "https://cyberarc-url";
        String responseJson = "{\"password\":\"secret\"}";
        DbCredentials dbCredentials = new DbCredentials();
        dbCredentials.setPassword("secret");

        when(httpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
            .thenReturn(httpResponse);
        when(httpResponse.body()).thenReturn(responseJson);
        ObjectMapper objectMapper = mock(ObjectMapper.class);
        when(objectMapper.readValue(responseJson, DbCredentials.class)).thenReturn(dbCredentials);

        Optional<String> password = fxPasswordClient.requestCyberArcPassword(cyberArcUrl);

        assertTrue(password.isPresent(), "Password should be present");
        assertEquals("secret", password.get(), "The password should match the expected value");
    }

    @Test
    void testRequestCyberArcPassword_Exception() throws Exception {
        String cyberArcUrl = "https://cyberarc-url";

        when(httpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
            .thenThrow(IOException.class);

        Optional<String> password = fxPasswordClient.requestCyberArcPassword(cyberArcUrl);

        assertFalse(password.isPresent(), "Password should be empty when an exception occurs");
    }

    @Test
    void testCreateSslContext_Success() throws Exception {
        // Mock the keystore file
        File mockKeystoreFile = mock(File.class);
        when(mockKeystoreFile.getPath()).thenReturn("mockKeystorePath");
        ReflectionTestUtils.setField(fxPasswordClient, "keystorePath", "mockKeystorePath");
        when(mockKeystoreFile.exists()).thenReturn(true);
        doReturn(mockKeystoreFile).when(fxPasswordClient).getKeystoreFile();

        SSLContext sslContext = fxPasswordClient.createSslContext();

        assertNotNull(sslContext, "SSLContext should be created successfully");
    }

    @Test
    void testGetKeystoreFile_Success() throws Exception {
        File keystoreFile = fxPasswordClient.getKeystoreFile();

        assertNotNull(keystoreFile, "Keystore file should be retrieved successfully");
        assertTrue(keystoreFile.exists(), "Keystore file should exist");
    }

    @Test
    void testGetKeystoreFile_FileNotFound() {
        ReflectionTestUtils.setField(fxPasswordClient, "keystorePath", "classpath:nonexistent.jks");

        Exception exception = assertThrows(RuntimeException.class, () -> {
            fxPasswordClient.getKeystoreFile();
        });

        assertEquals(FileNotFoundException.class, exception.getCause().getClass(), "Cause should be FileNotFoundException");
    }

    @Test
    void testSetupHttpClient_Success() throws Exception {
        SSLContext mockSslContext = mock(SSLContext.class);
        doReturn(mockSslContext).when(fxPasswordClient).createSslContext();

        HttpClient client = fxPasswordClient.setupHttpClient();

        assertNotNull(client, "HttpClient should be created successfully");
    }
}
