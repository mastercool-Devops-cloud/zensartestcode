import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.util.ContentCachingRequestWrapper;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class HttpRequestLogHelperTest {

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private IpAddressUtil mockIpAddressUtil;

    @InjectMocks
    private HttpRequestLogHelper httpRequestLogHelper;

    private final ObjectMapper objectMapper = new ObjectMapper();
    private Map<String, String> mapData;

    @BeforeEach
    void setUp() {
        mapData = new HashMap<>();
        mapData.put("applicationName", "TestApp");
        mapData.put("environment", "TestEnv");
    }

    @Test
    void testBuildLogRequest_ValidRequest() {
        when(mockRequest.getMethod()).thenReturn("GET");
        when(mockRequest.getRequestURI()).thenReturn("/test");
        when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(Collections.singleton("User-Agent")));
        when(mockRequest.getHeader("User-Agent")).thenReturn("JUnitTest");
        when(mockIpAddressUtil.getClientIpAddress(mockRequest)).thenReturn("127.0.0.1");

        assertDoesNotThrow(() -> HttpRequestLogHelper.buildLogRequest(mockRequest, mapData));
    }

    @Test
    void testBuildLogRequest_NullRequest() {
        assertDoesNotThrow(() -> HttpRequestLogHelper.buildLogRequest(null, mapData));
    }

    @Test
void testGetRequestBody_ValidJsonBody() throws IOException {
    // Create a JSON body
    String jsonBody = "{\"key1\":\"value1\", \"key2\":\"value2\"}";

    // Mock the request with a body
    MockHttpServletRequest mockServletRequest = new MockHttpServletRequest();
    mockServletRequest.setContent(jsonBody.getBytes(StandardCharsets.UTF_8));

    // Read input stream to trigger caching
    mockServletRequest.getInputStream().readAllBytes();

    // Wrap it in ContentCachingRequestWrapper
    ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper(mockServletRequest);

    // Call the method
    Map<String, String> requestBodyMap = HttpRequestLogHelper.getRequestBody(requestWrapper);

    // Assertions
    assertNotNull(requestBodyMap);
    assertEquals("value1", requestBodyMap.get("key1"));
    assertEquals("value2", requestBodyMap.get("key2"));
}


    @Test
    void testGetRequestBody_EmptyBody() throws IOException {
        // Mock an empty body request
        MockHttpServletRequest mockServletRequest = new MockHttpServletRequest();
        ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper(mockServletRequest);

        // Call the method
        Map<String, String> requestBodyMap = HttpRequestLogHelper.getRequestBody(requestWrapper);

        // Assertions
        assertNotNull(requestBodyMap);
        assertTrue(requestBodyMap.isEmpty());
    }

    @Test
    void testGetRequestBody_InvalidJson() {
        // Mock an invalid JSON request
        String invalidJson = "Invalid JSON";

        MockHttpServletRequest mockServletRequest = new MockHttpServletRequest();
        mockServletRequest.setContent(invalidJson.getBytes(StandardCharsets.UTF_8));
        ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper(mockServletRequest);

        // Expect an exception when parsing an invalid JSON
        assertThrows(RuntimeException.class, () -> HttpRequestLogHelper.getRequestBody(requestWrapper));
    }
}

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
-----------------------------------------------------------
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.util.ContentCachingResponseWrapper;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

class HttpResponseLogHelperTest {
    
    @Mock
    private ContentCachingResponseWrapper mockResponse;
    
    @Mock
    private HttpServletResponse rawResponse;
    
    private final ObjectMapper objectMapper = new ObjectMapper();
    
    private Map<String, String> mapData;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mapData = new HashMap<>();
        mapData.put("applicationName", "TestApp");
        mapData.put("environment", "TestEnv");
    }
    
    @Test
    void testBuildLogResponse_ValidResponse() throws IOException {
        when(mockResponse.getContentAsByteArray()).thenReturn("{\"key\":\"value\"}".getBytes(StandardCharsets.UTF_8));
        when(mockResponse.getStatus()).thenReturn(HttpStatus.OK.value());
        
        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(mockResponse, mapData));
    }

    @Test
    void testBuildLogResponse_NullResponse() {
        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(null, mapData));
    }

    @Test
    void testBuildLogResponse_InvalidResponseWrapper() {
        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(rawResponse, mapData));
    }
    
    @Test
    void testExtractResponseBodyAsMap_ValidJson() throws Exception {
        when(mockResponse.getContentAsByteArray()).thenReturn("{\"testKey\":\"testValue\"}".getBytes(StandardCharsets.UTF_8));
        Map<String, Object> responseBody = HttpResponseLogHelper.extractResponseBodyAsMap(mockResponse);
        
        assertNotNull(responseBody);
        assertEquals("testValue", responseBody.get("testKey"));
    }
    
    @Test
    void testExtractResponseBodyAsMap_InvalidJson() {
        when(mockResponse.getContentAsByteArray()).thenReturn("Invalid JSON".getBytes(StandardCharsets.UTF_8));
        assertThrows(RuntimeException.class, () -> HttpResponseLogHelper.extractResponseBodyAsMap(mockResponse));
    }
    
    @Test
    void testHandleLoggingException_JsonProcessingException() {
        Exception exception = new JsonProcessingException("JSON error") {};
        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(exception));
    }
    
    @Test
    void testHandleLoggingException_IOException() {
        Exception exception = new IOException("IO error");
        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(exception));
    }
    
    @Test
    void testHandleLoggingException_GenericException() {
        Exception exception = new RuntimeException("Unexpected error");
        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(exception));
    }
}
-----------------------------------------------
@ExtendWith(MockitoExtension.class)
class HttpResponseLogHelperTest {

    @Mock
    private ContentCachingResponseWrapper mockResponseWrapper;

    @Mock
    private HttpServletResponse mockHttpServletResponse;

    @Mock
    private Map<String, String> mockMapData;

    @Captor
    private ArgumentCaptor<ResponseLog> responseLogCaptor;

    @Test
    void testBuildLogResponse_ValidResponse() throws IOException {
        // Mock response body
        String responseBody = "{\"message\":\"success\"}";
        byte[] responseBytes = responseBody.getBytes(StandardCharsets.UTF_8);
        
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(responseBytes);
        when(mockResponseWrapper.getStatus()).thenReturn(200);

        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(mockResponseWrapper, mockMapData));
        
        verify(mockResponseWrapper).copyBodyToResponse();
    }

    @Test
    void testBuildLogResponse_NullResponse() {
        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(null, mockMapData));
        verifyNoInteractions(mockResponseWrapper);
    }

    @Test
    void testBuildLogResponse_NonWrappedResponse() {
        assertDoesNotThrow(() -> HttpResponseLogHelper.buildLogResponse(mockHttpServletResponse, mockMapData));
        verify(mockHttpServletResponse, never()).getWriter();
    }

    @Test
    void testExtractResponseBody_EmptyResponse() {
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(new byte[0]);

        Map<String, Object> responseBody = HttpResponseLogHelper.extractResponseBodyAsMap(mockResponseWrapper);

        assertNotNull(responseBody);
        assertTrue(responseBody.isEmpty());
    }

    @Test
    void testExtractResponseBody_InvalidJson() {
        String invalidJson = "{invalidJson";
        when(mockResponseWrapper.getContentAsByteArray()).thenReturn(invalidJson.getBytes(StandardCharsets.UTF_8));

        assertThrows(RuntimeException.class, () -> HttpResponseLogHelper.extractResponseBodyAsMap(mockResponseWrapper));
    }

    @Test
    void testHandleLoggingException_JsonProcessingException() {
        Exception jsonException = new JsonProcessingException("JSON error") {};

        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(jsonException));
    }

    @Test
    void testHandleLoggingException_IOException() {
        Exception ioException = new IOException("IO error");

        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(ioException));
    }

    @Test
    void testHandleLoggingException_GenericException() {
        Exception genericException = new Exception("General error");

        assertDoesNotThrow(() -> HttpResponseLogHelper.handleLoggingException(genericException));
    }
}
------------------------------------
org.opentest4j.AssertionFailedError: expected: <value2> but was: <null>

	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)
	at com.sb.fedssimplification.utilitymodules.loggingutility.helper.HttpRequestLogHelperTest.testGetRequestBody_ValidJsonBody(HttpRequestLogHelperTest.java:76)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
