@ExtendWith(MockitoExtension.class)
class HttpRequestLoggingHelperTest {

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private CachedBodyHttpServletRequestWapper cachedRequest;

    @Mock
    private Enumeration<String> mockHeaders;

    @Mock
    private ServletInputStream mockInputStream;

    @Mock
    private IpAddressUtil mockIpAddressUtil;

    private final Map<String, String> mapData = new HashMap<>();

    @BeforeEach
    void setUp() {
        mapData.put("applicationName", "TestApp");
        mapData.put("environment", "TestEnv");
    }

    @Test
    void testBuildRequestLog_ValidRequest() throws IOException {
        when(mockRequest.getMethod()).thenReturn("GET");
        when(mockRequest.getRequestURI()).thenReturn("/test");
        when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(List.of("User-Agent")));
        when(mockRequest.getHeader("User-Agent")).thenReturn("JUnitTest");
        when(mockIpAddressUtil.getClientIpAddress(mockRequest)).thenReturn("127.0.0.1");

        assertDoesNotThrow(() -> HttpRequestLoggingHelper.buildRequestLog(mockRequest, mapData));
    }

    @Test
    void testBuildRequestLog_NullRequest_ShouldLogWarning() {
        assertDoesNotThrow(() -> HttpRequestLoggingHelper.buildRequestLog(null, mapData));
    }

    @Test
    void testBuildRequestLog_EmptyHeaders() {
        when(mockRequest.getMethod()).thenReturn("POST");
        when(mockRequest.getRequestURI()).thenReturn("/empty-headers");
        when(mockRequest.getHeaderNames()).thenReturn(Collections.emptyEnumeration());

        assertDoesNotThrow(() -> HttpRequestLoggingHelper.buildRequestLog(mockRequest, mapData));
    }

    @Test
    void testGetRequestBody_ValidBody() throws IOException {
        byte[] mockContent = "Test Request Body".getBytes(StandardCharsets.UTF_8);
        when(cachedRequest.getInputStream()).thenReturn(new DelegatingServletInputStream(new ByteArrayInputStream(mockContent)));

        String body = HttpRequestLoggingHelper.getRequestBody(cachedRequest);
        assertEquals("Test Request Body", body);
    }

    @Test
    void testGetRequestBody_NullRequest_ShouldReturnDefaultMessage() {
        String body = HttpRequestLoggingHelper.getRequestBody(null);
        assertEquals("Request body not available or request not wrapped with ContentCachingRequestWrapper.", body);
    }

    @Test
    void testGetRequestBody_IOException_ShouldThrowRuntimeException() throws IOException {
        when(cachedRequest.getInputStream()).thenThrow(new IOException("Stream error"));

        assertThrows(RuntimeException.class, () -> HttpRequestLoggingHelper.getRequestBody(cachedRequest));
    }

    @Test
    void testGetBaseMessageInfo() {
        Map<String, String> headers = new HashMap<>();
        headers.put("application-name", "TestApp");
        headers.put("environment", "TestEnv");

        BaseLogDetails baseLogDetails = HttpRequestLoggingHelper.getBaseMessageInfo(headers);

        assertEquals("REQUEST", baseLogDetails.getMessageType());
        assertEquals("TestApp", baseLogDetails.getApplicationName());
        assertEquals("TestEnv", baseLogDetails.getHeaders().get("environment"));
    }
}
