@Around("within(@org.springframework.web.bind.annotation.RestController *) || " +
        "execution(* *..*Service.*(..)) || " +
        "@annotation(org.springframework.validation.annotation.Validated)")
public Object logHttpRequestResponse(ProceedingJoinPoint joinPoint) throws Exception {
    // Aspect logic remains the same
}


try {
    result = proceedSafely(joinPoint);
} catch (MethodArgumentNotValidException ex) {
    String validationErrors = ex.getBindingResult().getFieldErrors().stream()
            .map(error -> String.format("%s: %s", error.getField(), error.getDefaultMessage()))
            .collect(Collectors.joining(", "));
    log.error("VALIDATION FAILED: [Method: {}, URI: {}, Errors: {}]",
            Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
            Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
            validationErrors);
    throw ex;
} catch (Exception e) {
    log.error("HTTP EXCEPTION: [Method: {}, URI: {}, Error: {}]",
            Optional.ofNullable(request).map(HttpServletRequest::getMethod).orElse("UNKNOWN"),
            Optional.ofNullable(request).map(HttpServletRequest::getRequestURI).orElse("UNKNOWN"),
            e.getMessage());
    throw e; // Rethrow for higher-level handling
}


@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<String> handleValidationException(MethodArgumentNotValidException ex) {
        String validationErrors = ex.getBindingResult().getFieldErrors().stream()
                .map(error -> String.format("%s: %s", error.getField(), error.getDefaultMessage()))
                .collect(Collectors.joining(", "));
        log.error("Validation failed: {}", validationErrors);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Validation errors: " + validationErrors);
    }

    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<String> handleConstraintViolationException(ConstraintViolationException ex) {
        String validationErrors = ex.getConstraintViolations().stream()
                .map(violation -> String.format("%s: %s", violation.getPropertyPath(), violation.getMessage()))
                .collect(Collectors.joining(", "));
        log.error("Constraint violation: {}", validationErrors);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Validation errors: " + validationErrors);
    }
}
