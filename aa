package com.example.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.util.ContentCachingRequestWrapper;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;

public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void logRequest(HttpServletRequest request) {
        try {
            Map<String, Object> requestLog = Map.of(
                    "method", request.getMethod(),
                    "uri", request.getRequestURI(),
                    "query", request.getQueryString(),
                    "headers", Collections.list(request.getHeaderNames())
                            .stream()
                            .collect(Collectors.toMap(h -> h, request::getHeader)),
                    "body", getRequestBody(request)
            );
            logger.info("Request: {}", objectMapper.writeValueAsString(requestLog));
        } catch (Exception e) {
            logger.error("Error logging request: {}", e.getMessage(), e);
        }
    }

    public static void logResponse(HttpServletResponse response) {
        try {
            Map<String, Object> responseLog = Map.of(
                    "status", response.getStatus(),
                    "headers", response.getHeaderNames()
                            .stream()
                            .collect(Collectors.toMap(h -> h, response::getHeader))
            );
            logger.info("Response: {}", objectMapper.writeValueAsString(responseLog));
        } catch (Exception e) {
            logger.error("Error logging response: {}", e.getMessage(), e);
        }
    }

    private static String getRequestBody(HttpServletRequest request) {
        if (request instanceof ContentCachingRequestWrapper) {
            ContentCachingRequestWrapper wrappedRequest = (ContentCachingRequestWrapper) request;
            byte[] content = wrappedRequest.getContentAsByteArray();
            return new String(content, StandardCharsets.UTF_8);
        } else {
            return "Request body not cached. Wrap request with ContentCachingRequestWrapper.";
        }
    }
}
---------------------------------------
package com.example.filter;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.util.ContentCachingRequestWrapper;

import java.io.IOException;

public class RequestCachingFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // No initialization required
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        if (request instanceof HttpServletRequest) {
            HttpServletRequest wrappedRequest = new ContentCachingRequestWrapper((HttpServletRequest) request);
            chain.doFilter(wrappedRequest, response);
        } else {
            chain.doFilter(request, response);
        }
    }

    @Override
    public void destroy() {
        // No cleanup required
    }
}
------------------------------------
package com.example.config;

import com.example.filter.RequestCachingFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.servlet.Filter;

@Configuration
public class FilterConfig {

    @Bean
    public Filter requestCachingFilter() {
        return new RequestCachingFilter();
    }
}
----------------------------------
