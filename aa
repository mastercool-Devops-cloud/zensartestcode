public static Map<String, String> getRequestBodyAsMap(final HttpServletRequest request) {
    Map<String, String> requestBodyMap = new HashMap<>();

    Optional.ofNullable(request)
        .filter(req -> req instanceof CachedBodyHttpServletRequestWapper)
        .ifPresent(req -> {
            CachedBodyHttpServletRequestWapper wrappedRequest = (CachedBodyHttpServletRequestWapper) req;
            try {
                byte[] content = wrappedRequest.getInputStream().readAllBytes();
                String body = new String(content, StandardCharsets.UTF_8);

                // Assuming request body is JSON, convert it into a Map
                ObjectMapper objectMapper = new ObjectMapper();
                requestBodyMap.putAll(objectMapper.readValue(body, new TypeReference<Map<String, String>>() {}));
            } catch (IOException e) {
                throw new RuntimeException("Error reading request body", e);
            }
        });

    return requestBodyMap;
}
------------------------------------
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

public class ResponseHelper {
    
    public static Map<String, String> extractResponseBodyAsMap(final ContentCachingResponseWrapper responseWrapper) {
        Map<String, String> responseBodyMap = new HashMap<>();

        try {
            String responseBody = new String(responseWrapper.getContentAsByteArray(), StandardCharsets.UTF_8);

            // Assuming the response body is JSON, convert it into a Map
            if (responseBody != null && !responseBody.isEmpty()) {
                ObjectMapper objectMapper = new ObjectMapper();
                responseBodyMap = objectMapper.readValue(responseBody, new TypeReference<Map<String, String>>() {});
            }
        } catch (Exception e) {
            throw new RuntimeException("Error reading response body", e);
        }

        return responseBodyMap;
    }
}
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.lang.String` from Object value (token `JsonToken.START_OBJECT`)
 at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 18] (through reference chain: java.util.LinkedHashMap["fxContractDto"])
