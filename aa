@Log4j2
public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    // Existing methods: logRequest(), logResponseWithBody(), logException()

    /**
     * Logs an informational message with optional context.
     *
     * @param message The informational message to log.
     * @param context Additional contextual information (can be null or empty).
     */
    public static void logInfo(String message, Map<String, Object> context) {
        if (message == null || message.isEmpty()) {
            logger.warn("Attempted to log an empty or null informational message.");
            return;
        }

        StringBuilder logMessage = new StringBuilder(message);

        // Add context if available
        if (context != null && !context.isEmpty()) {
            try {
                String contextJson = objectMapper.writeValueAsString(context);
                logMessage.append(" | Context: ").append(contextJson);
            } catch (JsonProcessingException e) {
                logMessage.append(" | Context could not be serialized.");
            }
        }

        logger.info(logMessage.toString());
    }

    /**
     * Overloaded method for logging an informational message without context.
     *
     * @param message The informational message to log.
     */
    public static void logInfo(String message) {
        logInfo(message, null);
    }
}
------------------------------
@Component
public class RequestFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest httpServletRequest = (HttpServletRequest) request;

        try {
            // Log the incoming request
            LoggingUtil.logRequest(httpServletRequest);

            // Log additional info about the request
            LoggingUtil.logInfo("Request received and logged", Map.of(
                "method", httpServletRequest.getMethod(),
                "uri", httpServletRequest.getRequestURI()
            ));

            chain.doFilter(request, response);

        } catch (Exception e) {
            // Log exceptions during request processing
            LoggingUtil.logException(e);
            throw e;
        }
    }
}
{
  "timestamp": "2025-01-17T14:32:00Z",
  "level": "ERROR",
  "message": "Failed to process user login",
  "logger_name": "auth-service",
  "service_name": "auth-service",
  "environment": "production",
  "host": "auth-server-01",
 
  "user_id": "user-12345",
  "event_type": "user_login",
  "ip_address": "203.0.113.42",
  
  "error_code": "401",
  "error_message": "Invalid credentials",
}
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;

public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);

    public static void logResponseWithDetails(HttpServletResponse response, String serviceName, String environment) {
        Optional.ofNullable(response).ifPresentOrElse(res -> {
            try {
                // Extract response details
                int statusCode = res.getStatus();
                String logLevel = getLogLevelFromStatus(statusCode);
                String errorCode = (statusCode >= 400) ? "HTTP-" + statusCode : null;
                String errorMessage = (statusCode >= 400) ? getErrorMessageFromStatus(statusCode) : null;

                // Create MessageInfo object
                MessageInfo messageInfo = new MessageInfo(
                        logLevel,
                        "Response processed",
                        serviceName,
                        environment,
                        null, // Event type can be null or specified as needed
                        null, // Request details are not included here
                        null, // IP address
                        errorCode,
                        errorMessage
                );

                // Log the response with the appropriate log level
                String logMessage = new ObjectMapper().writeValueAsString(messageInfo);
                if ("ERROR".equalsIgnoreCase(logLevel)) {
                    logger.error(logMessage);
                } else if ("WARN".equalsIgnoreCase(logLevel)) {
                    logger.warn(logMessage);
                } else {
                    logger.info(logMessage);
                }
            } catch (Exception e) {
                logger.error("Error logging response details: {}", e.getMessage(), e);
            }
        }, () -> logger.warn("HttpServletResponse is null, cannot log response details."));
    }

    private static String getLogLevelFromStatus(int statusCode) {
        if (statusCode >= 500) {
            return "ERROR"; // Server errors
        } else if (statusCode >= 400) {
            return "WARN"; // Client errors
        } else {
            return "INFO"; // Successful responses
        }
    }

    private static String getErrorMessageFromStatus(int statusCode) {
        switch (statusCode) {
            case 400: return "Bad Request";
            case 401: return "Unauthorized";
            case 403: return "Forbidden";
            case 404: return "Not Found";
            case 500: return "Internal Server Error";
            case 502: return "Bad Gateway";
            case 503: return "Service Unavailable";
            default: return "Unknown Error";
        }
    }
}
-----------------------------
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class LoggingUtil {
    private static final Logger logger = LoggerFactory.getLogger(LoggingUtil.class);

    public static void logInfo(HttpServletRequest request, HttpServletResponse response, String message) {
        try {
            // Extract request details
            String method = Optional.ofNullable(request.getMethod()).orElse("UNKNOWN");
            String uri = Optional.ofNullable(request.getRequestURI()).orElse("UNKNOWN");
            Map<String, String> requestHeaders = Collections.list(request.getHeaderNames())
                    .stream()
                    .collect(Collectors.toMap(h -> h, request::getHeader));
            
            // Extract response details
            int status = response.getStatus();
            Map<String, String> responseHeaders = Optional.ofNullable(response.getHeaderNames())
                    .map(headers -> headers.stream().collect(Collectors.toMap(h -> h, response::getHeader)))
                    .orElse(Collections.emptyMap());
            String logLevel = determineLogLevel(status);
            String errorCode = determineErrorCode(status);
            String errorMessage = determineErrorMessage(status);

            // Build the log message
            String logDetails = String.format(
                "Message: %s | Method: %s | URI: %s | Status: %d | LogLevel: %s | ErrorCode: %s | ErrorMessage: %s | " +
                "RequestHeaders: %s | ResponseHeaders: %s",
                message, method, uri, status, logLevel, errorCode, errorMessage, requestHeaders, responseHeaders
            );

            // Log with the appropriate log level
            if ("ERROR".equalsIgnoreCase(logLevel)) {
                logger.error(logDetails);
            } else if ("WARN".equalsIgnoreCase(logLevel)) {
                logger.warn(logDetails);
            } else {
                logger.info(logDetails);
            }
        } catch (Exception e) {
            logger.error("Error logging information: {}", e.getMessage(), e);
        }
    }

    private static String determineLogLevel(int status) {
        if (status >= 500) {
            return "ERROR"; // Server errors
        } else if (status >= 400) {
            return "WARN"; // Client errors
        } else {
            return "INFO"; // Successful responses
        }
    }

    private static String determineErrorCode(int status) {
        return (status >= 400) ? "HTTP-" + status : null;
    }

    private static String determineErrorMessage(int status) {
        switch (status) {
            case 400: return "Bad Request";
            case 401: return "Unauthorized";
            case 403: return "Forbidden";
            case 404: return "Not Found";
            case 500: return "Internal Server Error";
            case 502: return "Bad Gateway";
            case 503: return "Service Unavailable";
            default: return null;
        }
    }
}
--------------------------------------
import java.time.LocalDateTime;
import java.util.Map;

public class RequestLog {
    private LocalDateTime timestamp;
    private String logLevel;
    private String method;
    private String uri;
    private Map<String, String> headers;
    private String requestBody;
    private int status;
    private String errorCode;
    private String errorMessage;

    public RequestLog(String logLevel, String method, String uri, Map<String, String> headers, String requestBody,
                      int status, String errorCode, String errorMessage) {
        this.timestamp = LocalDateTime.now();
        this.logLevel = logLevel;
        this.method = method;
        this.uri = uri;
        this.headers = headers;
        this.requestBody = requestBody;
        this.status = status;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }

    @Override
    public String toString() {
        return "RequestLog{" +
                "timestamp=" + timestamp +
                ", logLevel='" + logLevel + '\'' +
                ", method='" + method + '\'' +
                ", uri='" + uri + '\'' +
                ", headers=" + headers +
                ", requestBody='" + requestBody + '\'' +
                ", status=" + status +
                ", errorCode='" + errorCode + '\'' +
                ", errorMessage='" + errorMessage + '\'' +
                '}';
    }
}
