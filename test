Why Do We Need Spring Cloud Config Server?
In a microservices architecture, managing configuration centrally is essential to maintain consistency, scalability, and flexibility. The Spring Cloud Config Server provides a centralized configuration management system that allows applications to dynamically fetch configuration properties from an external repository (like Git, database, or file system).

Purpose of Spring Cloud Config Server
Centralized Configuration Management

Stores application properties in a single location (e.g., Git, database).

Eliminates the need to manage properties in individual services.

Dynamic Configuration Updates

Allows applications to refresh configurations at runtime without redeployment.

Useful when changing database credentials, API URLs, feature toggles, etc.

Environment-Specific Configurations

Supports multiple environments (Dev, UAT, Production).

Uses profiles (application-dev.yml, application-prod.yml) for environment-specific settings.

Secure & Encrypted Properties

Supports encryption of sensitive properties like passwords, API keys.

Uses @EnableConfigServer with encrypted values.

Version Control & Auditing

Configurations are stored in Git, enabling versioning and rollback.

Every change is tracked, ensuring reliability.

Integration with Spring Boot Applications

Clients can fetch properties dynamically using spring.cloud.config.uri.

Works seamlessly with @RefreshScope to update beans dynamically.

How It Works?
Spring Cloud Config Server fetches configuration properties from a Git repository, database, or file system.

Client applications request their configuration from the Config Server via REST API (/config/{application}/{profile}).

If @RefreshScope is used, applications can refresh properties without restarting.

