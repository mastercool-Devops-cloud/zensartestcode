
import com.sb.fedssimplification.utilitymodules.loggingutility.service.LogService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

import static org.mockito.Mockito.*;

class RequestLogFilterTest {

    @Mock
    private LogService logService;

    @Mock
    private FilterChain filterChain;

    @Mock
    private HttpServletRequest httpRequest;

    @Mock
    private ServletResponse servletResponse;

    @InjectMocks
    private RequestLogFilter requestLogFilter;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDoFilter_SuccessfulRequest() throws IOException, ServletException {
        // Mock request attributes
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Run filter
        requestLogFilter.doFilter(httpRequest, servletResponse, filterChain);

        // Verify logRequest is called with latencyMs = 0
        verify(logService, times(1)).logRequest(any(), eq(0L));

        // Ensure request proceeds to the next filter
        verify(filterChain, times(1)).doFilter(any(), any());
    }

    @Test
    void testDoFilter_ExceptionThrown() throws IOException, ServletException {
        // Mock request attributes
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Mock filter chain throwing an exception
        doThrow(new RuntimeException("Test Exception")).when(filterChain).doFilter(any(), any());

        // Verify exception handling
        try {
            requestLogFilter.doFilter(httpRequest, servletResponse, filterChain);
        } catch (Exception ignored) {}

        // Ensure logException is called
        verify(logService, times(1)).logException(any());

        // Ensure filter still tries to log the request before failing
        verify(logService, times(1)).logRequest(any(), eq(0L));
    }
}
java.lang.NullPointerException: Cannot invoke "jakarta.servlet.ServletInputStream.readAllBytes()" because the return value of "jakarta.servlet.http.HttpServletRequest.getInputStream()" is null

	at com.sb.fedssimplification.utilitymodules.loggingutility.model.request.CachedBodyHttpServletRequestWrapper.<init>(CachedBodyHttpServletRequestWrapper.java:15)
	at com.sb.fedssimplification.utilitymodules.loggingutility.filter.RequestLogFilter.doFilter(RequestLogFilter.java:31)
	at com.sb.fedssimplification.utilitymodules.secretsmanager.filter.RequestLogFilterTest.testDoFilter_SuccessfulRequest(RequestLogFilterTest.java:45)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

class MockServletInputStream extends ServletInputStream {
    private final ByteArrayInputStream inputStream;

    public MockServletInputStream(byte[] data) {
        this.inputStream = new ByteArrayInputStream(data);
    }

    @Override
    public int read() throws IOException {
        return inputStream.read();
    }

    @Override
    public boolean isFinished() {
        return inputStream.available() == 0;
    }

    @Override
    public boolean isReady() {
        return true;
    }

    @Override
    public void setReadListener(ReadListener readListener) {
        // No-op implementation
    }
}
import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.MockitoAnnotations;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.Mockito.*;

@BeforeEach
void setUp() throws IOException {
    MockitoAnnotations.openMocks(this);

    // Mock request input stream to return valid data
    when(httpRequest.getInputStream()).thenReturn(new MockServletInputStream("{}".getBytes()));

    // Mock other necessary behaviors
    when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());
}
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;

import static org.mockito.Mockito.*;

class ResponseLogFilterTest {

    @Mock
    private LogService logService;

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private HttpServletResponse mockResponse;

    @Mock
    private FilterChain mockFilterChain;

    private ContentCachingResponseWrapper wrappedResponse;

    @InjectMocks
    private ResponseLogFilter responseLogFilter;

    @BeforeEach
    void setUp() throws IOException {
        MockitoAnnotations.openMocks(this);
        
        // Mock ContentCachingResponseWrapper with HttpServletResponse
        wrappedResponse = new ContentCachingResponseWrapper(mockResponse);

        // Mock behavior of request
        when(mockRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis() - 100);
    }

    @Test
    void testDoFilter_SuccessfulRequest() throws IOException, ServletException {
        // Act
        responseLogFilter.doFilter(mockRequest, wrappedResponse, mockFilterChain);

        // Assert
        verify(mockFilterChain).doFilter(eq(mockRequest), eq(wrappedResponse)); // Ensure request goes through filter
        verify(logService).logResponse(eq(wrappedResponse), eq(mockRequest), anyLong()); // Log response must be called
        verify(wrappedResponse).copyBodyToResponse(); // Ensure response body is copied
    }

    @Test
    void testDoFilter_ExceptionThrown() throws IOException, ServletException {
        // Arrange
        doThrow(new RuntimeException("Test Exception")).when(mockFilterChain).doFilter(any(), any());

        // Act & Assert
        try {
            responseLogFilter.doFilter(mockRequest, wrappedResponse, mockFilterChain);
        } catch (Exception e) {
            verify(logService).logException(any(RuntimeException.class)); // Exception must be logged
        }
    }
}
Argument(s) are different! Wanted:
mockFilterChain.doFilter(
    mockRequest,
    org.springframework.web.util.ContentCachingResponseWrapper@63ec445c
);
-> at com.sb.fedssimplification.utilitymodules.secretsmanager.filter.ResponseLogFilterTest.testDoFilter_SuccessfulRequest(ResponseLogFilterTest.java:52)
Actual invocations have different arguments at position [1]:
mockFilterChain.doFilter(
    mockRequest,
    org.springframework.web.util.ContentCachingResponseWrapper@3104351d
);
-> at com.sb.fedssimplification.utilitymodules.loggingutility.filter.ResponseLogFilter.doFilter(ResponseLogFilter.java:37)

Argument(s) are different! Wanted:
mockFilterChain.doFilter(
    mockRequest,
    org.springframework.web.util.ContentCachingResponseWrapper@63ec445c
);
-> at com.sb.fedssimplification.utilitymodules.secretsmanager.filter.ResponseLogFilterTest.testDoFilter_SuccessfulRequest(ResponseLogFilterTest.java:52)
Actual invocations have different arguments at position [1]:
mockFilterChain.doFilter(
    mockRequest,
    org.springframework.web.util.ContentCachingResponseWrapper@3104351d
);
-> at com.sb.fedssimplification.utilitymodules.loggingutility.filter.ResponseLogFilter.doFilter(ResponseLogFilter.java:37)

	at com.sb.fedssimplification.utilitymodules.secretsmanager.filter.ResponseLogFilterTest.testDoFilter_SuccessfulRequest(ResponseLogFilterTest.java:52)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.*;

class ResponseLogFilterTest {

    @Mock
    private LogService logService;

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private HttpServletResponse mockResponse;

    @Mock
    private FilterChain mockFilterChain;

    @InjectMocks
    private ResponseLogFilter responseLogFilter;

    @BeforeEach
    void setUp() throws IOException {
        MockitoAnnotations.openMocks(this);

        // Mock behavior of request
        when(mockRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis() - 100);
    }

    @Test
    void testDoFilter_SuccessfulRequest() throws IOException, ServletException {
        // Act
        responseLogFilter.doFilter(mockRequest, mockResponse, mockFilterChain);

        // Assert: Use argThat to match any ContentCachingResponseWrapper instance
        verify(mockFilterChain).doFilter(eq(mockRequest), argThat(response -> response instanceof ContentCachingResponseWrapper));

        verify(logService).logResponse(any(ContentCachingResponseWrapper.class), eq(mockRequest), anyLong());
        verify(mockResponse, atLeastOnce()).getStatus(); // Ensure response processing
    }

    @Test
    void testDoFilter_ExceptionThrown() throws IOException, ServletException {
        // Arrange
        doThrow(new RuntimeException("Test Exception")).when(mockFilterChain).doFilter(any(), any());

        // Act & Assert
        try {
            responseLogFilter.doFilter(mockRequest, mockResponse, mockFilterChain);
        } catch (Exception e) {
            verify(logService).logException(any(RuntimeException.class)); // Exception must be logged
        }
    }
}
