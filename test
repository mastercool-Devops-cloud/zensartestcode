import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.appender.WriterAppender;
import org.apache.logging.log4j.core.layout.PatternLayout;
import org.apache.logging.log4j.test.appender.ListAppender;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.StringWriter;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class LogProcessorServiceTest {

    private LogProcessorService logProcessorService;
    private ListAppender listAppender;
    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
        logProcessorService = new LogProcessorService();

        // Get the root logger and attach a test appender
        LoggerContext context = (LoggerContext) LogManager.getContext(false);
        org.apache.logging.log4j.core.Logger logger = context.getRootLogger();

        listAppender = new ListAppender("TestAppender");
        listAppender.start();
        logger.addAppender(listAppender);
    }

    @Test
    void testProcessLog_RequestLog() throws Exception {
        // Arrange
        TestLogObject testObject = new TestLogObject("Test", 123);
        String expectedJson = objectMapper.writeValueAsString(testObject);

        // Act
        logProcessorService.processLog(testObject, "REQUEST");

        // Assert
        List<String> logs = listAppender.getMessages();
        assertTrue(logs.stream().anyMatch(log -> log.contains("Request Log:") && log.contains(expectedJson)));
    }

    @Test
    void testProcessLog_ResponseLog() throws Exception {
        TestLogObject testObject = new TestLogObject("ResponseTest", 456);
        String expectedJson = objectMapper.writeValueAsString(testObject);

        logProcessorService.processLog(testObject, "RESPONSE");

        List<String> logs = listAppender.getMessages();
        assertTrue(logs.stream().anyMatch(log -> log.contains("Response Log:") && log.contains(expectedJson)));
    }

    @Test
    void testProcessLog_ErrorLog() throws Exception {
        TestLogObject testObject = new TestLogObject("ErrorTest", 500);
        String expectedJson = objectMapper.writeValueAsString(testObject);

        logProcessorService.processLog(testObject, "ERROR");

        List<String> logs = listAppender.getMessages();
        assertTrue(logs.stream().anyMatch(log -> log.contains("Error Log:") && log.contains(expectedJson)));
    }

    @Test
    void testProcessLog_UnknownType() {
        logProcessorService.processLog("Unknown", "UNKNOWN");

        List<String> logs = listAppender.getMessages();
        assertTrue(logs.stream().anyMatch(log -> log.contains("Unknown Log Type: UNKNOWN")));
    }

    @Test
    void testProcessLog_ExceptionHandling() {
        LogProcessorService faultyService = new LogProcessorService() {
            @Override
            public void processLog(Object object, String logType) {
                throw new RuntimeException("Serialization Error");
            }
        };

        try {
            faultyService.processLog(new TestLogObject("Faulty", 999), "REQUEST");
        } catch (Exception ignored) {
        }

        List<String> logs = listAppender.getMessages();
        assertTrue(logs.stream().anyMatch(log -> log.contains("Failed to process log: Serialization Error")));
    }

    // Dummy class for test data
    private static class TestLogObject {
        public String name;
        public int id;

        public TestLogObject(String name, int id) {
            this.name = name;
            this.id = id;
        }
    }
}
