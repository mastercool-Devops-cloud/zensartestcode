import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class RequestWrapperTest {

    @Test
    void testRequestWrapperWithHeadersAndBody() throws IOException {
        // Mock HttpServletRequest
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);

        // Setup request attributes
        when(mockRequest.getMethod()).thenReturn("POST");
        when(mockRequest.getRequestURI()).thenReturn("/api/resource");
        when(mockRequest.getQueryString()).thenReturn("id=123");

        // Mock headers
        Enumeration<String> headerNames = Collections.enumeration(Collections.singletonList("Content-Type"));
        when(mockRequest.getHeaderNames()).thenReturn(headerNames);
        when(mockRequest.getHeader("Content-Type")).thenReturn("application/json");

        // Mock body
        String requestBody = "{\"name\":\"John\",\"age\":30}";
        ByteArrayInputStream bodyStream = new ByteArrayInputStream(requestBody.getBytes());
        when(mockRequest.getInputStream()).thenReturn(new CachedBodyHttpServletRequestWapper(bodyStream));

        // Create RequestWrapper instance
        RequestWrapper requestWrapper = new RequestWrapper(mockRequest);

        // Assertions
        assertEquals("POST", requestWrapper.getMethod());
        assertEquals("/api/resource", requestWrapper.getUri());
        assertEquals("id=123", requestWrapper.getQuery());
        assertEquals(Map.of("Content-Type", "application/json"), requestWrapper.getHeaders());
        assertEquals(requestBody, requestWrapper.getBody());
    }

    @Test
    void testRequestWrapperWithNoBody() throws IOException {
        // Mock HttpServletRequest
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);

        // Setup request attributes
        when(mockRequest.getMethod()).thenReturn("GET");
        when(mockRequest.getRequestURI()).thenReturn("/api/resource");
        when(mockRequest.getQueryString()).thenReturn("id=123");

        // Mock headers
        Enumeration<String> headerNames = Collections.enumeration(Collections.singletonList("Accept"));
        when(mockRequest.getHeaderNames()).thenReturn(headerNames);
        when(mockRequest.getHeader("Accept")).thenReturn("application/json");

        // No body provided
        when(mockRequest.getInputStream()).thenThrow(new IOException("No body available"));

        // Create RequestWrapper instance
        RequestWrapper requestWrapper = new RequestWrapper(mockRequest);

        // Assertions
        assertEquals("GET", requestWrapper.getMethod());
        assertEquals("/api/resource", requestWrapper.getUri());
        assertEquals("id=123", requestWrapper.getQuery());
        assertEquals(Map.of("Accept", "application/json"), requestWrapper.getHeaders());
        assertEquals("Request body not available or request not wrapped with ContentCachingRequestWrapper.", requestWrapper.getBody());
    }

    @Test
    void testRequestWrapperWithEmptyRequest() {
        // Mock HttpServletRequest
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);

        // Setup request attributes
        when(mockRequest.getMethod()).thenReturn(null);
        when(mockRequest.getRequestURI()).thenReturn(null);
        when(mockRequest.getQueryString()).thenReturn(null);
        when(mockRequest.getHeaderNames()).thenReturn(Collections.emptyEnumeration());

        // Create RequestWrapper instance
        RequestWrapper requestWrapper = new RequestWrapper(mockRequest);

        // Assertions
        assertEquals("UNKNOWN", requestWrapper.getMethod());
        assertEquals("UNKNOWN", requestWrapper.getUri());
        assertEquals("", requestWrapper.getQuery());
        assertEquals(Collections.emptyMap(), requestWrapper.getHeaders());
        assertEquals("Request body not available or request not wrapped with ContentCachingRequestWrapper.", requestWrapper.getBody());
    }
}
