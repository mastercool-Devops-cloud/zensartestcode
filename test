import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import jakarta.servlet.http.HttpServletRequest;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.catalina.connector.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.HttpStatus;
import org.springframework.web.util.ContentCachingResponseWrapper;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Map;
import java.util.Optional;

class LogServiceImplTest {

    @Mock
    private LogFactory logFactory;
    
    @Mock
    private LogProcessorService logProcessorService;

    @Mock
    private HttpServletRequest httpRequest;

    @Mock
    private ContentCachingResponseWrapper wrappedResponse;

    @InjectMocks
    private LogServiceImpl logService;

    private static final Logger log = LogManager.getLogger(LogServiceImplTest.class);

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testLogRequest() {
        // Given
        when(httpRequest.getMethod()).thenReturn("POST");
        when(httpRequest.getRequestURI()).thenReturn("/api/test");
        when(HttpLogHelper.getRequestBody(httpRequest)).thenReturn(Map.of("key", "value"));

        // When
        logService.logRequest(httpRequest, 100L);

        // Then
        verify(logFactory, times(1)).createRestLog(any(), eq("POST"), eq("/api/test"), any(), isNull(), eq(100L));
    }

    @Test
    void testLogResponse() throws IOException {
        // Given
        when(wrappedResponse.getStatus()).thenReturn(HttpStatus.OK.value());
        when(HttpLogHelper.getResponseBody(wrappedResponse)).thenReturn(Map.of("response", "ok"));

        // When
        logService.logResponse(wrappedResponse, httpRequest, 200L);

        // Then
        verify(logFactory, times(1)).createRestLog(any(), isNull(), isNull(), any(), eq(HttpStatus.OK.value()), eq(200L));
    }

    @Test
    void testLogException() {
        // Given
        Exception exception = new RuntimeException("Test Exception");

        // When
        logService.logException(exception);

        // Then
        verify(logFactory, times(1)).createErrorLog(any(), eq("Test Exception"), anyString());
    }

    @Test
    void testGetLocalIpAddress() throws UnknownHostException {
        // Given
        InetAddress mockInetAddress = mock(InetAddress.class);
        when(mockInetAddress.getHostAddress()).thenReturn("192.168.1.1");
        InetAddress.setLocalHost(mockInetAddress);

        // When
        String ipAddress = logService.getLocalIpAddress();

        // Then
        assertEquals("192.168.1.1", ipAddress);
    }

    @Test
    void testGetLocalIpAddress_UnknownHostException() throws UnknownHostException {
        // Given
        InetAddress.setLocalHost(null);

        // When
        String ipAddress = logService.getLocalIpAddress();

        // Then
        assertEquals("UNKNOWN", ipAddress);
    }
}
java.lang.NullPointerException: Cannot invoke "jakarta.servlet.ServletInputStream.readAllBytes()" because the return value of "jakarta.servlet.http.HttpServletRequest.getInputStream()" is null

	at com.sb.fedssimplification.utilitymodules.loggingutility.helper.HttpLogHelper.getRequestBody(HttpLogHelper.java:23)
	at com.sb.fedssimplification.utilitymodules.loggingutility.service.impl.LogServiceImplTest.testLogRequest(LogServiceImplTest.java:48)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.mock.web.DelegatingServletInputStream;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.Mockito.*;

class LogServiceImplTest {

    @Test
    void testLogRequest() throws IOException {
        // Mock HttpServletRequest
        HttpServletRequest httpRequest = mock(HttpServletRequest.class);

        // Simulate request body content
        String requestBody = "{\"key\": \"value\"}";
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(requestBody.getBytes());
        ServletInputStream servletInputStream = new DelegatingServletInputStream(byteArrayInputStream);

        // Mock getInputStream() to return a valid input stream
        when(httpRequest.getInputStream()).thenReturn(servletInputStream);

        // Call the method under test
        LogServiceImpl logService = new LogServiceImpl(new LogFactory(), new LogProcessorService());
        logService.logRequest(httpRequest, 200L);

        // Verify interactions
        verify(httpRequest, times(1)).getInputStream();
    }
}

---------------------------------------
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.mock.web.DelegatingServletInputStream;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.Mockito.*;

class LogServiceImplTest {

    @Test
    void testLogRequest() throws IOException {
        // Mock HttpServletRequest
        HttpServletRequest httpRequest = mock(HttpServletRequest.class);

        // Simulate request body content
        String requestBody = "{\"key\": \"value\"}";
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(requestBody.getBytes());
        ServletInputStream servletInputStream = new DelegatingServletInputStream(byteArrayInputStream);

        // Mock getInputStream() to return a valid input stream
        when(httpRequest.getInputStream()).thenReturn(servletInputStream);

        // Call the method under test
        LogServiceImpl logService = new LogServiceImpl(new LogFactory(), new LogProcessorService());
        logService.logRequest(httpRequest, 200L);

        // Verify interactions
        verify(httpRequest, times(1)).getInputStream();
    }
}
-------------------------------------------
java.lang.NullPointerException: Cannot read the array length because "bytes" is null

	at java.base/java.lang.String.<init>(String.java:1425)
	at com.sb.fedssimplification.utilitymodules.loggingutility.helper.HttpLogHelper.getResponseBody(HttpLogHelper.java:37)
	at com.sb.fedssimplification.utilitymodules.loggingutility.service.impl.LogServiceImplTest.testLogResponse(LogServiceImplTest.java:67)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.util.ContentCachingResponseWrapper;
import java.io.IOException;

import static org.mockito.Mockito.*;

class LogServiceImplTest {

    @Test
    void testLogResponse() throws IOException {
        // Mock HttpServletRequest
        HttpServletRequest httpRequest = mock(HttpServletRequest.class);
        
        // Create a mock response with content
        MockHttpServletResponse mockResponse = new MockHttpServletResponse();
        mockResponse.getWriter().write("{\"message\": \"Success\"}");
        mockResponse.getWriter().flush();

        // Wrap response in ContentCachingResponseWrapper
        ContentCachingResponseWrapper wrappedResponse = new ContentCachingResponseWrapper(mockResponse);

        // Force caching by calling getContentAsByteArray()
        wrappedResponse.copyBodyToResponse();

        // Call the method under test
        LogServiceImpl logService = new LogServiceImpl(new LogFactory(), new LogProcessorService());
        logService.logResponse(wrappedResponse, httpRequest, 200L);

        // Verify response content was accessed
        assert new String(wrappedResponse.getContentAsByteArray()).contains("Success");
    }
}
