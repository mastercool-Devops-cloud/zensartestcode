
import com.sb.fedssimplification.utilitymodules.loggingutility.service.LogService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

import static org.mockito.Mockito.*;

class RequestLogFilterTest {

    @Mock
    private LogService logService;

    @Mock
    private FilterChain filterChain;

    @Mock
    private HttpServletRequest httpRequest;

    @Mock
    private ServletResponse servletResponse;

    @InjectMocks
    private RequestLogFilter requestLogFilter;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDoFilter_SuccessfulRequest() throws IOException, ServletException {
        // Mock request attributes
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Run filter
        requestLogFilter.doFilter(httpRequest, servletResponse, filterChain);

        // Verify logRequest is called with latencyMs = 0
        verify(logService, times(1)).logRequest(any(), eq(0L));

        // Ensure request proceeds to the next filter
        verify(filterChain, times(1)).doFilter(any(), any());
    }

    @Test
    void testDoFilter_ExceptionThrown() throws IOException, ServletException {
        // Mock request attributes
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Mock filter chain throwing an exception
        doThrow(new RuntimeException("Test Exception")).when(filterChain).doFilter(any(), any());

        // Verify exception handling
        try {
            requestLogFilter.doFilter(httpRequest, servletResponse, filterChain);
        } catch (Exception ignored) {}

        // Ensure logException is called
        verify(logService, times(1)).logException(any());

        // Ensure filter still tries to log the request before failing
        verify(logService, times(1)).logRequest(any(), eq(0L));
    }
}
