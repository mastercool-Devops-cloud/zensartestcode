spring:
  datasource:
    hikari:
      pool-name: feds_database_conn_pool
      transaction-isolation: 8
      jdbc-url: >
        jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=ON)(LOAD_BALANCE=ON)
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1621))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1621))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1622))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1622))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1821))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1821))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1822))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1822))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1623))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1623))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon01-vip.standardbank.co.za)(PORT=1823))
        (ADDRESS=(PROTOCOL=TCP)(HOST=doracon02-vip.standardbank.co.za)(PORT=1823))
        (CONNECT_DATA=(SERVICE_NAME=TCDUAT01)(SERVER=DEDICATED)
        (FAILOVER_MODE=(TYPE=session)(METHOD=basic)(DELAY=5)(RETRIES=100))))
      username: FX
      password: XJS4x#LKX8vyPhr
      driver-class-name: oracle.jdbc.OracleDriver
      maximum-pool-size: 10
      minimum-idle: 5
      data-source-properties:
        oracle.jdbc.ReadTimeout: 15000
      max-lifetime: 840000
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.DependsOn;

import javax.sql.DataSource;

@TestConfiguration
public class DbOracleRealConfig {

    @Bean
    @ConfigurationProperties(prefix = "spring.datasource.hikari")
    public HikariConfig hikariConfig() {
        return new HikariConfig();
    }

    @Bean
    @DependsOn("hikariConfig")
    public DataSource dataSource(HikariConfig hikariConfig) {
        return new HikariDataSource(hikariConfig);
    }
}
