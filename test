public class LogProcessorFactory {

    public static LogProcessor getLogProcessor(LogType logType) {
        switch (logType) {
            case EXCEPTION:
                return new ExceptionLogProcessor();
            case REQUEST:
                return new RequestLogProcessor(); // For request logging (optional)
            case RESPONSE:
                return new ResponseLogProcessor(); // For response logging (optional)
            default:
                throw new IllegalArgumentException("Unknown log type: " + logType);
        }
    }
}
-----------------------------------------------
public interface LogProcessor {
    void process(Object input); // Input can be customized based on your needs
}
----------------------------------
import javax.servlet.http.HttpServletResponse;

public class ResponseLogProcessor implements LogProcessor {

    @Override
    public void process(Object object) {
        if (object instanceof HttpServletResponse) {
            HttpServletResponse response = (HttpServletResponse) object;
            LoggingUtil.logResponse(response); // Delegate to LoggingUtil for response logging
        } else {
            throw new IllegalArgumentException("Invalid object type for ResponseLogProcessor");
        }
    }
}
-----------------------------
package com.example.logging.processors;

import com.example.logging.util.LoggingUtil;

public class ExceptionLogProcessor implements LogProcessor {

    @Override
    public void process(Object input) {
        if (input instanceof Exception) {
            LoggingUtil.logException((Exception) input);
        } else {
            throw new IllegalArgumentException("Invalid input for ExceptionLogProcessor");
        }
    }
}
--------------------------------------
import javax.servlet.http.HttpServletRequest;

public class RequestLogProcessor implements LogProcessor {

    @Override
    public void process(Object object) {
        if (object instanceof HttpServletRequest) {
            HttpServletRequest request = (HttpServletRequest) object;
            LoggingUtil.logRequest(request); // Delegate to LoggingUtil for request logging
        } else {
            throw new IllegalArgumentException("Invalid object type for RequestLogProcessor");
        }
    }
}

--------------------------------------
@Log4j2
public class LoggingUtil {

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    public static void log(LogRequest logRequest) {
        try {
            log.info("Request: {}", OBJECT_MAPPER.writeValueAsString(logRequest));
        } catch (JsonProcessingException e) {
            log.error("Error logging request: {}", e.getMessage(), e);
        }
    }

    public static void log(LogResponse logResponse) {
        try {
            log.info("Response: {}", OBJECT_MAPPER.writeValueAsString(logResponse));
        } catch (JsonProcessingException e) {
            log.error("Error logging response: {}", e.getMessage(), e);
        }
    }
}
---------------------------------------
public class RequestCachingLoggingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        try {
            if (request instanceof HttpServletRequest) {
                LogProcessor requestProcessor = LogProcessorFactory.getLogProcessor(LogType.REQUEST);
                requestProcessor.process(request); // Log the request
            }

            chain.doFilter(request, response);

        } catch (Exception e) {
            LoggingUtil.logException(e); // Log the exception
            throw e; // Re-throw the exception to ensure proper error handling
        }
    }
}
-----------------------------------------------
public class ResponseCachingLoggingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        ContentCachingResponseWrapper wrappedResponse = null;

        try {
            if (response instanceof HttpServletResponse) {
                wrappedResponse = new ContentCachingResponseWrapper((HttpServletResponse) response);
            }

            chain.doFilter(request, wrappedResponse != null ? wrappedResponse : response);

            if (wrappedResponse != null) {
                LogProcessor responseProcessor = LogProcessorFactory.getLogProcessor(LogType.RESPONSE);
                responseProcessor.process(wrappedResponse); // Log the response
                wrappedResponse.copyBodyToResponse();
            }

        } catch (Exception e) {
            LoggingUtil.logException(e); // Log the exception
            throw e; // Re-throw the exception to ensure proper error handling
        }
    }
}
----------------------------------------
public class RequestCachingLoggingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        try {
            if (request instanceof HttpServletRequest) {
                chain.doFilter(request, response);
            }
        } catch (Exception e) {
            // Use factory to get the appropriate log processor
            LogProcessor exceptionProcessor = LogProcessorFactory.getLogProcessor(LogType.EXCEPTION);
            exceptionProcessor.process(e); // Process the exception
            throw e; // Re-throw the exception
        }
    }
}
------------------------------------------
package com.example.logging.util;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class LoggingUtil {

    private static final Logger logger = LogManager.getLogger(LoggingUtil.class);

    public static void logException(Exception exception) {
        if (exception != null) {
            logger.error("Exception occurred: {}", exception.getMessage(), exception);
        } else {
            logger.warn("Attempted to log a null exception.");
        }
    }
}
