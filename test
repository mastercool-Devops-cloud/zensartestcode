import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.web.util.ContentCachingResponseWrapper;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class LogServiceImplTest {

    @Mock
    private LogFactory logFactory;

    @Mock
    private HttpServletRequest httpRequest;

    @Mock
    private ContentCachingResponseWrapper wrappedResponse;

    @InjectMocks
    private LogServiceImpl logService;

    private static final long LATENCY_MS = 500L;

    @BeforeEach
    void setup() {
        when(httpRequest.getMethod()).thenReturn("POST");
        when(httpRequest.getRequestURI()).thenReturn("/api/test");
    }

    @Test
    void testLogRequest() throws Exception {
        // Given
        Map<String, String> requestBody = Collections.singletonMap("key", "value");
        RestLog restLog = new RestLog(null, "POST", "/api/test", requestBody, 0, null, LATENCY_MS);

        // Mock static method in HttpLogHelper
        mockStatic(HttpLogHelper.class).when(() -> HttpLogHelper.getRequestBody(httpRequest))
                .thenReturn(requestBody);

        when(logFactory.createRestLog("POST", "/api/test", requestBody, 0, null, LATENCY_MS))
                .thenReturn(restLog);

        // When
        logService.logRequest(httpRequest, LATENCY_MS);

        // Then
        verify(logFactory).createRestLog("POST", "/api/test", requestBody, 0, null, LATENCY_MS);
    }

    @Test
    void testLogResponse() throws IOException {
        // Given
        when(wrappedResponse.getStatus()).thenReturn(HttpStatus.OK.value());

        Map<String, String> responseBody = Collections.singletonMap("response", "data");
        RestLog restLog = new RestLog(null, "POST", "/api/test", responseBody,
                HttpStatus.OK.value(), "OK", LATENCY_MS);

        // Mock static method in HttpLogHelper
        mockStatic(HttpLogHelper.class).when(() -> HttpLogHelper.getResponseBody(wrappedResponse))
                .thenReturn(responseBody);

        when(logFactory.createRestLog("POST", "/api/test", responseBody,
                HttpStatus.OK.value(), "OK", LATENCY_MS)).thenReturn(restLog);

        // When
        logService.logResponse(wrappedResponse, httpRequest, LATENCY_MS);

        // Then
        verify(logFactory).createRestLog("POST", "/api/test", responseBody,
                HttpStatus.OK.value(), "OK", LATENCY_MS);
    }

    @Test
    void testLogException() {
        // Given
        Exception exception = new RuntimeException("Test Exception");
        ErrorLog errorLog = new ErrorLog(null, HttpStatus.INTERNAL_SERVER_ERROR.value(),
                exception.getMessage(), "Stack Trace");

        when(logFactory.createErrorLog(HttpStatus.INTERNAL_SERVER_ERROR.value(),
                exception.getMessage(), anyString())).thenReturn(errorLog);

        // When
        logService.logException(exception);

        // Then
        verify(logFactory).createErrorLog(HttpStatus.INTERNAL_SERVER_ERROR.value(),
                exception.getMessage(), anyString());
    }
}
