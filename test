
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.math.BigDecimal;
import java.util.Optional;

@ExtendWith(MockitoExtension.class)
class CashflowCalculatorserviceImplTest {

    @Mock
    private FxContractservice fxContractservice;

    @InjectMocks
    private CashflowCalculatorserviceImpl cashflowCalculatorservice;

    private FxContractDto contractDto;
    private FxContract fxContract;

    @BeforeEach
    void setUp() {
        // Initialize contract DTO and contract entities for testing
        contractDto = new FxContractDto();
        contractDto.setNettedAmount("1000");
        contractDto.setPurchaseSaleIndicator("B");

        fxContract = new FxContract();
        fxContract.setNettedAmount("800");
        fxContract.setPurchaseSaleIndicator("B");
    }

    @Test
    void testCalculateCashflow_Success() {
        // Mock FxContractMapper behavior
        when(FxContractMapper.INSTANCE.toEntity(any())).thenReturn(fxContract);
        
        // Mock fxContractservice behavior
        when(fxContractservice.getContracontract(any())).thenReturn(Optional.of(fxContract));
        when(fxContractservice.updateStoreAmountAndProfitLossIndicator(anyString(), anyDouble(), anyString()))
            .thenReturn(Optional.of(fxContract));

        // Call the method under test
        FxContract result = cashflowCalculatorservice.calculatecashflow(contractDto);

        // Assert and verify the results
        assertNotNull(result);
        verify(fxContractservice).updateStoreAmountAndProfitLossIndicator(anyString(), anyDouble(), anyString());
    }

    @Test
    void testCalculateCashflow_NoExistingContract() {
        // Mock the contract retrieval to return empty
        when(FxContractMapper.INSTANCE.toEntity(any())).thenReturn(fxContract);
        when(fxContractservice.getContracontract(any())).thenReturn(Optional.empty());

        FxContract result = cashflowCalculatorservice.calculatecashflow(contractDto);

        assertNotNull(result);
        // Verify the storeAmount calculation logic here
    }

    @Test
    void testCalculateCashflow_ExceptionHandling() {
        // Mock the contract retrieval to throw an exception
        when(FxContractMapper.INSTANCE.toEntity(any())).thenThrow(new RuntimeException("Test Exception"));

        Exception exception = assertThrows(RuntimeException.class, 
            () -> cashflowCalculatorservice.calculatecashflow(contractDto));

        assertEquals("Test Exception", exception.getMessage());
    }
}
