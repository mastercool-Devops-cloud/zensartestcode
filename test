import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.beans.factory.annotation.Value;

import javax.servlet.http.HttpServletRequest;

import java.util.Map;

public class LogServiceImplTest {

    @Mock
    private LogFactory logFactory;

    @Mock
    private LogProcessorService logProcessorService;

    @Mock
    private HttpServletRequest httpRequest;

    @InjectMocks
    private LogServiceImpl logServiceImpl;

    @Value("${spring.application.name}")
    private String application;

    @Value("${spring.profiles.active:default}")
    private String environment;

    @BeforeEach
    void setUp() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testLogRequest_ShouldProcessLogSuccessfully() {
        // Arrange
        long latencyMs = 100L;
        Map<String, String> requestBody = Map.of("key", "value"); // Simulated request body

        // Mock the behavior of HttpServletRequest
        when(httpRequest.getMethod()).thenReturn("GET");
        when(httpRequest.getRequestURI()).thenReturn("/test/uri");
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Mock external dependencies
        when(logFactory.createRestLog(any(), any(), any(), any(), anyInt(), any(), anyLong())).thenReturn(new RestLog());
        doNothing().when(logProcessorService).processLog(any(), eq(LogType.REQUEST));

        // Act
        logServiceImpl.logRequest(httpRequest, latencyMs);

        // Assert
        verify(logFactory, times(1)).createRestLog(any(), eq("GET"), eq("/test/uri"), eq(requestBody), eq(0), isNull(), eq(latencyMs));
        verify(logProcessorService, times(1)).processLog(any(), eq(LogType.REQUEST));
    }

    @Test
    void testLogRequest_WithException_ShouldCallLogException() {
        // Arrange
        long latencyMs = 100L;
        Map<String, String> requestBody = Map.of("key", "value");

        // Mock the behavior of HttpServletRequest to simulate an exception
        when(httpRequest.getMethod()).thenReturn("GET");
        when(httpRequest.getRequestURI()).thenReturn("/test/uri");
        when(httpRequest.getAttribute("startTime")).thenReturn(System.currentTimeMillis());

        // Mock external dependencies to throw an exception
        when(logFactory.createRestLog(any(), any(), any(), any(), anyInt(), any(), anyLong())).thenThrow(new RuntimeException("Test Exception"));

        // Act & Assert
        assertThrows(RuntimeException.class, () -> logServiceImpl.logRequest(httpRequest, latencyMs));
    }
}
